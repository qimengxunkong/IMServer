// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protocol_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protocol_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protocol_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protocol_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protocol_2eproto;
namespace tutorial {
class addfriend_request;
struct addfriend_requestDefaultTypeInternal;
extern addfriend_requestDefaultTypeInternal _addfriend_request_default_instance_;
class addfriend_response;
struct addfriend_responseDefaultTypeInternal;
extern addfriend_responseDefaultTypeInternal _addfriend_response_default_instance_;
class addfriend_result_request;
struct addfriend_result_requestDefaultTypeInternal;
extern addfriend_result_requestDefaultTypeInternal _addfriend_result_request_default_instance_;
class addfriend_result_response;
struct addfriend_result_responseDefaultTypeInternal;
extern addfriend_result_responseDefaultTypeInternal _addfriend_result_response_default_instance_;
class deletefriend_request;
struct deletefriend_requestDefaultTypeInternal;
extern deletefriend_requestDefaultTypeInternal _deletefriend_request_default_instance_;
class deletefriend_response;
struct deletefriend_responseDefaultTypeInternal;
extern deletefriend_responseDefaultTypeInternal _deletefriend_response_default_instance_;
class login_request;
struct login_requestDefaultTypeInternal;
extern login_requestDefaultTypeInternal _login_request_default_instance_;
class login_response;
struct login_responseDefaultTypeInternal;
extern login_responseDefaultTypeInternal _login_response_default_instance_;
class mobile_request;
struct mobile_requestDefaultTypeInternal;
extern mobile_requestDefaultTypeInternal _mobile_request_default_instance_;
class mobile_response;
struct mobile_responseDefaultTypeInternal;
extern mobile_responseDefaultTypeInternal _mobile_response_default_instance_;
class notify_online_reponse;
struct notify_online_reponseDefaultTypeInternal;
extern notify_online_reponseDefaultTypeInternal _notify_online_reponse_default_instance_;
class notify_online_request;
struct notify_online_requestDefaultTypeInternal;
extern notify_online_requestDefaultTypeInternal _notify_online_request_default_instance_;
class selectfriend_request;
struct selectfriend_requestDefaultTypeInternal;
extern selectfriend_requestDefaultTypeInternal _selectfriend_request_default_instance_;
class selectfriend_response;
struct selectfriend_responseDefaultTypeInternal;
extern selectfriend_responseDefaultTypeInternal _selectfriend_response_default_instance_;
class sendtxtmsg_reponse;
struct sendtxtmsg_reponseDefaultTypeInternal;
extern sendtxtmsg_reponseDefaultTypeInternal _sendtxtmsg_reponse_default_instance_;
class sendtxtmsg_request;
struct sendtxtmsg_requestDefaultTypeInternal;
extern sendtxtmsg_requestDefaultTypeInternal _sendtxtmsg_request_default_instance_;
class userinfo;
struct userinfoDefaultTypeInternal;
extern userinfoDefaultTypeInternal _userinfo_default_instance_;
}  // namespace tutorial
PROTOBUF_NAMESPACE_OPEN
template<> ::tutorial::addfriend_request* Arena::CreateMaybeMessage<::tutorial::addfriend_request>(Arena*);
template<> ::tutorial::addfriend_response* Arena::CreateMaybeMessage<::tutorial::addfriend_response>(Arena*);
template<> ::tutorial::addfriend_result_request* Arena::CreateMaybeMessage<::tutorial::addfriend_result_request>(Arena*);
template<> ::tutorial::addfriend_result_response* Arena::CreateMaybeMessage<::tutorial::addfriend_result_response>(Arena*);
template<> ::tutorial::deletefriend_request* Arena::CreateMaybeMessage<::tutorial::deletefriend_request>(Arena*);
template<> ::tutorial::deletefriend_response* Arena::CreateMaybeMessage<::tutorial::deletefriend_response>(Arena*);
template<> ::tutorial::login_request* Arena::CreateMaybeMessage<::tutorial::login_request>(Arena*);
template<> ::tutorial::login_response* Arena::CreateMaybeMessage<::tutorial::login_response>(Arena*);
template<> ::tutorial::mobile_request* Arena::CreateMaybeMessage<::tutorial::mobile_request>(Arena*);
template<> ::tutorial::mobile_response* Arena::CreateMaybeMessage<::tutorial::mobile_response>(Arena*);
template<> ::tutorial::notify_online_reponse* Arena::CreateMaybeMessage<::tutorial::notify_online_reponse>(Arena*);
template<> ::tutorial::notify_online_request* Arena::CreateMaybeMessage<::tutorial::notify_online_request>(Arena*);
template<> ::tutorial::selectfriend_request* Arena::CreateMaybeMessage<::tutorial::selectfriend_request>(Arena*);
template<> ::tutorial::selectfriend_response* Arena::CreateMaybeMessage<::tutorial::selectfriend_response>(Arena*);
template<> ::tutorial::sendtxtmsg_reponse* Arena::CreateMaybeMessage<::tutorial::sendtxtmsg_reponse>(Arena*);
template<> ::tutorial::sendtxtmsg_request* Arena::CreateMaybeMessage<::tutorial::sendtxtmsg_request>(Arena*);
template<> ::tutorial::userinfo* Arena::CreateMaybeMessage<::tutorial::userinfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tutorial {

// ===================================================================

class userinfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tutorial.userinfo) */ {
 public:
  inline userinfo() : userinfo(nullptr) {}
  ~userinfo() override;
  explicit PROTOBUF_CONSTEXPR userinfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  userinfo(const userinfo& from);
  userinfo(userinfo&& from) noexcept
    : userinfo() {
    *this = ::std::move(from);
  }

  inline userinfo& operator=(const userinfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline userinfo& operator=(userinfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const userinfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const userinfo* internal_default_instance() {
    return reinterpret_cast<const userinfo*>(
               &_userinfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(userinfo& a, userinfo& b) {
    a.Swap(&b);
  }
  inline void Swap(userinfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(userinfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  userinfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<userinfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const userinfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const userinfo& from) {
    userinfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(userinfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tutorial.userinfo";
  }
  protected:
  explicit userinfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // required string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:tutorial.userinfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protocol_2eproto;
};
// -------------------------------------------------------------------

class mobile_request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tutorial.mobile_request) */ {
 public:
  inline mobile_request() : mobile_request(nullptr) {}
  ~mobile_request() override;
  explicit PROTOBUF_CONSTEXPR mobile_request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  mobile_request(const mobile_request& from);
  mobile_request(mobile_request&& from) noexcept
    : mobile_request() {
    *this = ::std::move(from);
  }

  inline mobile_request& operator=(const mobile_request& from) {
    CopyFrom(from);
    return *this;
  }
  inline mobile_request& operator=(mobile_request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const mobile_request& default_instance() {
    return *internal_default_instance();
  }
  static inline const mobile_request* internal_default_instance() {
    return reinterpret_cast<const mobile_request*>(
               &_mobile_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(mobile_request& a, mobile_request& b) {
    a.Swap(&b);
  }
  inline void Swap(mobile_request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(mobile_request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  mobile_request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<mobile_request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const mobile_request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const mobile_request& from) {
    mobile_request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(mobile_request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tutorial.mobile_request";
  }
  protected:
  explicit mobile_request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMobileFieldNumber = 1,
  };
  // required string mobile = 1;
  bool has_mobile() const;
  private:
  bool _internal_has_mobile() const;
  public:
  void clear_mobile();
  const std::string& mobile() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mobile(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mobile();
  PROTOBUF_NODISCARD std::string* release_mobile();
  void set_allocated_mobile(std::string* mobile);
  private:
  const std::string& _internal_mobile() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mobile(const std::string& value);
  std::string* _internal_mutable_mobile();
  public:

  // @@protoc_insertion_point(class_scope:tutorial.mobile_request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mobile_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protocol_2eproto;
};
// -------------------------------------------------------------------

class mobile_response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tutorial.mobile_response) */ {
 public:
  inline mobile_response() : mobile_response(nullptr) {}
  ~mobile_response() override;
  explicit PROTOBUF_CONSTEXPR mobile_response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  mobile_response(const mobile_response& from);
  mobile_response(mobile_response&& from) noexcept
    : mobile_response() {
    *this = ::std::move(from);
  }

  inline mobile_response& operator=(const mobile_response& from) {
    CopyFrom(from);
    return *this;
  }
  inline mobile_response& operator=(mobile_response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const mobile_response& default_instance() {
    return *internal_default_instance();
  }
  static inline const mobile_response* internal_default_instance() {
    return reinterpret_cast<const mobile_response*>(
               &_mobile_response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(mobile_response& a, mobile_response& b) {
    a.Swap(&b);
  }
  inline void Swap(mobile_response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(mobile_response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  mobile_response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<mobile_response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const mobile_response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const mobile_response& from) {
    mobile_response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(mobile_response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tutorial.mobile_response";
  }
  protected:
  explicit mobile_response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 3,
    kCodeFieldNumber = 1,
    kIcodeFieldNumber = 2,
  };
  // optional string data = 3;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // required int32 code = 1;
  bool has_code() const;
  private:
  bool _internal_has_code() const;
  public:
  void clear_code();
  int32_t code() const;
  void set_code(int32_t value);
  private:
  int32_t _internal_code() const;
  void _internal_set_code(int32_t value);
  public:

  // required int32 icode = 2;
  bool has_icode() const;
  private:
  bool _internal_has_icode() const;
  public:
  void clear_icode();
  int32_t icode() const;
  void set_icode(int32_t value);
  private:
  int32_t _internal_icode() const;
  void _internal_set_icode(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:tutorial.mobile_response)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    int32_t code_;
    int32_t icode_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protocol_2eproto;
};
// -------------------------------------------------------------------

class login_request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tutorial.login_request) */ {
 public:
  inline login_request() : login_request(nullptr) {}
  ~login_request() override;
  explicit PROTOBUF_CONSTEXPR login_request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  login_request(const login_request& from);
  login_request(login_request&& from) noexcept
    : login_request() {
    *this = ::std::move(from);
  }

  inline login_request& operator=(const login_request& from) {
    CopyFrom(from);
    return *this;
  }
  inline login_request& operator=(login_request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const login_request& default_instance() {
    return *internal_default_instance();
  }
  static inline const login_request* internal_default_instance() {
    return reinterpret_cast<const login_request*>(
               &_login_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(login_request& a, login_request& b) {
    a.Swap(&b);
  }
  inline void Swap(login_request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(login_request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  login_request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<login_request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const login_request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const login_request& from) {
    login_request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(login_request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tutorial.login_request";
  }
  protected:
  explicit login_request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMobileFieldNumber = 1,
    kIcodeFieldNumber = 2,
  };
  // required string mobile = 1;
  bool has_mobile() const;
  private:
  bool _internal_has_mobile() const;
  public:
  void clear_mobile();
  const std::string& mobile() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mobile(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mobile();
  PROTOBUF_NODISCARD std::string* release_mobile();
  void set_allocated_mobile(std::string* mobile);
  private:
  const std::string& _internal_mobile() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mobile(const std::string& value);
  std::string* _internal_mutable_mobile();
  public:

  // required int32 icode = 2;
  bool has_icode() const;
  private:
  bool _internal_has_icode() const;
  public:
  void clear_icode();
  int32_t icode() const;
  void set_icode(int32_t value);
  private:
  int32_t _internal_icode() const;
  void _internal_set_icode(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:tutorial.login_request)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mobile_;
    int32_t icode_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protocol_2eproto;
};
// -------------------------------------------------------------------

class login_response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tutorial.login_response) */ {
 public:
  inline login_response() : login_response(nullptr) {}
  ~login_response() override;
  explicit PROTOBUF_CONSTEXPR login_response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  login_response(const login_response& from);
  login_response(login_response&& from) noexcept
    : login_response() {
    *this = ::std::move(from);
  }

  inline login_response& operator=(const login_response& from) {
    CopyFrom(from);
    return *this;
  }
  inline login_response& operator=(login_response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const login_response& default_instance() {
    return *internal_default_instance();
  }
  static inline const login_response* internal_default_instance() {
    return reinterpret_cast<const login_response*>(
               &_login_response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(login_response& a, login_response& b) {
    a.Swap(&b);
  }
  inline void Swap(login_response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(login_response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  login_response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<login_response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const login_response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const login_response& from) {
    login_response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(login_response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tutorial.login_response";
  }
  protected:
  explicit login_response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDescFieldNumber = 2,
    kCodeFieldNumber = 1,
  };
  // optional string desc = 2;
  bool has_desc() const;
  private:
  bool _internal_has_desc() const;
  public:
  void clear_desc();
  const std::string& desc() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_desc(ArgT0&& arg0, ArgT... args);
  std::string* mutable_desc();
  PROTOBUF_NODISCARD std::string* release_desc();
  void set_allocated_desc(std::string* desc);
  private:
  const std::string& _internal_desc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_desc(const std::string& value);
  std::string* _internal_mutable_desc();
  public:

  // required int32 code = 1;
  bool has_code() const;
  private:
  bool _internal_has_code() const;
  public:
  void clear_code();
  int32_t code() const;
  void set_code(int32_t value);
  private:
  int32_t _internal_code() const;
  void _internal_set_code(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:tutorial.login_response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr desc_;
    int32_t code_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protocol_2eproto;
};
// -------------------------------------------------------------------

class notify_online_request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tutorial.notify_online_request) */ {
 public:
  inline notify_online_request() : notify_online_request(nullptr) {}
  ~notify_online_request() override;
  explicit PROTOBUF_CONSTEXPR notify_online_request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  notify_online_request(const notify_online_request& from);
  notify_online_request(notify_online_request&& from) noexcept
    : notify_online_request() {
    *this = ::std::move(from);
  }

  inline notify_online_request& operator=(const notify_online_request& from) {
    CopyFrom(from);
    return *this;
  }
  inline notify_online_request& operator=(notify_online_request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const notify_online_request& default_instance() {
    return *internal_default_instance();
  }
  static inline const notify_online_request* internal_default_instance() {
    return reinterpret_cast<const notify_online_request*>(
               &_notify_online_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(notify_online_request& a, notify_online_request& b) {
    a.Swap(&b);
  }
  inline void Swap(notify_online_request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(notify_online_request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  notify_online_request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<notify_online_request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const notify_online_request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const notify_online_request& from) {
    notify_online_request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(notify_online_request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tutorial.notify_online_request";
  }
  protected:
  explicit notify_online_request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kStateFieldNumber = 2,
  };
  // required int32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // required bool state = 2;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  bool state() const;
  void set_state(bool value);
  private:
  bool _internal_state() const;
  void _internal_set_state(bool value);
  public:

  // @@protoc_insertion_point(class_scope:tutorial.notify_online_request)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int32_t id_;
    bool state_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protocol_2eproto;
};
// -------------------------------------------------------------------

class notify_online_reponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tutorial.notify_online_reponse) */ {
 public:
  inline notify_online_reponse() : notify_online_reponse(nullptr) {}
  ~notify_online_reponse() override;
  explicit PROTOBUF_CONSTEXPR notify_online_reponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  notify_online_reponse(const notify_online_reponse& from);
  notify_online_reponse(notify_online_reponse&& from) noexcept
    : notify_online_reponse() {
    *this = ::std::move(from);
  }

  inline notify_online_reponse& operator=(const notify_online_reponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline notify_online_reponse& operator=(notify_online_reponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const notify_online_reponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const notify_online_reponse* internal_default_instance() {
    return reinterpret_cast<const notify_online_reponse*>(
               &_notify_online_reponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(notify_online_reponse& a, notify_online_reponse& b) {
    a.Swap(&b);
  }
  inline void Swap(notify_online_reponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(notify_online_reponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  notify_online_reponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<notify_online_reponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const notify_online_reponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const notify_online_reponse& from) {
    notify_online_reponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(notify_online_reponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tutorial.notify_online_reponse";
  }
  protected:
  explicit notify_online_reponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kStateFieldNumber = 2,
  };
  // required int32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // required bool state = 2;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  bool state() const;
  void set_state(bool value);
  private:
  bool _internal_state() const;
  void _internal_set_state(bool value);
  public:

  // @@protoc_insertion_point(class_scope:tutorial.notify_online_reponse)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int32_t id_;
    bool state_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protocol_2eproto;
};
// -------------------------------------------------------------------

class sendtxtmsg_request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tutorial.sendtxtmsg_request) */ {
 public:
  inline sendtxtmsg_request() : sendtxtmsg_request(nullptr) {}
  ~sendtxtmsg_request() override;
  explicit PROTOBUF_CONSTEXPR sendtxtmsg_request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  sendtxtmsg_request(const sendtxtmsg_request& from);
  sendtxtmsg_request(sendtxtmsg_request&& from) noexcept
    : sendtxtmsg_request() {
    *this = ::std::move(from);
  }

  inline sendtxtmsg_request& operator=(const sendtxtmsg_request& from) {
    CopyFrom(from);
    return *this;
  }
  inline sendtxtmsg_request& operator=(sendtxtmsg_request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const sendtxtmsg_request& default_instance() {
    return *internal_default_instance();
  }
  static inline const sendtxtmsg_request* internal_default_instance() {
    return reinterpret_cast<const sendtxtmsg_request*>(
               &_sendtxtmsg_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(sendtxtmsg_request& a, sendtxtmsg_request& b) {
    a.Swap(&b);
  }
  inline void Swap(sendtxtmsg_request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(sendtxtmsg_request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  sendtxtmsg_request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<sendtxtmsg_request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const sendtxtmsg_request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const sendtxtmsg_request& from) {
    sendtxtmsg_request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(sendtxtmsg_request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tutorial.sendtxtmsg_request";
  }
  protected:
  explicit sendtxtmsg_request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChatmessageFieldNumber = 3,
    kSrcidFieldNumber = 1,
    kDestidFieldNumber = 2,
  };
  // required string chatmessage = 3;
  bool has_chatmessage() const;
  private:
  bool _internal_has_chatmessage() const;
  public:
  void clear_chatmessage();
  const std::string& chatmessage() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_chatmessage(ArgT0&& arg0, ArgT... args);
  std::string* mutable_chatmessage();
  PROTOBUF_NODISCARD std::string* release_chatmessage();
  void set_allocated_chatmessage(std::string* chatmessage);
  private:
  const std::string& _internal_chatmessage() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_chatmessage(const std::string& value);
  std::string* _internal_mutable_chatmessage();
  public:

  // required int32 srcid = 1;
  bool has_srcid() const;
  private:
  bool _internal_has_srcid() const;
  public:
  void clear_srcid();
  int32_t srcid() const;
  void set_srcid(int32_t value);
  private:
  int32_t _internal_srcid() const;
  void _internal_set_srcid(int32_t value);
  public:

  // required int32 destid = 2;
  bool has_destid() const;
  private:
  bool _internal_has_destid() const;
  public:
  void clear_destid();
  int32_t destid() const;
  void set_destid(int32_t value);
  private:
  int32_t _internal_destid() const;
  void _internal_set_destid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:tutorial.sendtxtmsg_request)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chatmessage_;
    int32_t srcid_;
    int32_t destid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protocol_2eproto;
};
// -------------------------------------------------------------------

class sendtxtmsg_reponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tutorial.sendtxtmsg_reponse) */ {
 public:
  inline sendtxtmsg_reponse() : sendtxtmsg_reponse(nullptr) {}
  ~sendtxtmsg_reponse() override;
  explicit PROTOBUF_CONSTEXPR sendtxtmsg_reponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  sendtxtmsg_reponse(const sendtxtmsg_reponse& from);
  sendtxtmsg_reponse(sendtxtmsg_reponse&& from) noexcept
    : sendtxtmsg_reponse() {
    *this = ::std::move(from);
  }

  inline sendtxtmsg_reponse& operator=(const sendtxtmsg_reponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline sendtxtmsg_reponse& operator=(sendtxtmsg_reponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const sendtxtmsg_reponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const sendtxtmsg_reponse* internal_default_instance() {
    return reinterpret_cast<const sendtxtmsg_reponse*>(
               &_sendtxtmsg_reponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(sendtxtmsg_reponse& a, sendtxtmsg_reponse& b) {
    a.Swap(&b);
  }
  inline void Swap(sendtxtmsg_reponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(sendtxtmsg_reponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  sendtxtmsg_reponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<sendtxtmsg_reponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const sendtxtmsg_reponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const sendtxtmsg_reponse& from) {
    sendtxtmsg_reponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(sendtxtmsg_reponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tutorial.sendtxtmsg_reponse";
  }
  protected:
  explicit sendtxtmsg_reponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChatmessageFieldNumber = 2,
    kDestidFieldNumber = 1,
  };
  // required string chatmessage = 2;
  bool has_chatmessage() const;
  private:
  bool _internal_has_chatmessage() const;
  public:
  void clear_chatmessage();
  const std::string& chatmessage() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_chatmessage(ArgT0&& arg0, ArgT... args);
  std::string* mutable_chatmessage();
  PROTOBUF_NODISCARD std::string* release_chatmessage();
  void set_allocated_chatmessage(std::string* chatmessage);
  private:
  const std::string& _internal_chatmessage() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_chatmessage(const std::string& value);
  std::string* _internal_mutable_chatmessage();
  public:

  // required int32 destid = 1;
  bool has_destid() const;
  private:
  bool _internal_has_destid() const;
  public:
  void clear_destid();
  int32_t destid() const;
  void set_destid(int32_t value);
  private:
  int32_t _internal_destid() const;
  void _internal_set_destid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:tutorial.sendtxtmsg_reponse)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chatmessage_;
    int32_t destid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protocol_2eproto;
};
// -------------------------------------------------------------------

class addfriend_request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tutorial.addfriend_request) */ {
 public:
  inline addfriend_request() : addfriend_request(nullptr) {}
  ~addfriend_request() override;
  explicit PROTOBUF_CONSTEXPR addfriend_request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  addfriend_request(const addfriend_request& from);
  addfriend_request(addfriend_request&& from) noexcept
    : addfriend_request() {
    *this = ::std::move(from);
  }

  inline addfriend_request& operator=(const addfriend_request& from) {
    CopyFrom(from);
    return *this;
  }
  inline addfriend_request& operator=(addfriend_request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const addfriend_request& default_instance() {
    return *internal_default_instance();
  }
  static inline const addfriend_request* internal_default_instance() {
    return reinterpret_cast<const addfriend_request*>(
               &_addfriend_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(addfriend_request& a, addfriend_request& b) {
    a.Swap(&b);
  }
  inline void Swap(addfriend_request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(addfriend_request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  addfriend_request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<addfriend_request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const addfriend_request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const addfriend_request& from) {
    addfriend_request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(addfriend_request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tutorial.addfriend_request";
  }
  protected:
  explicit addfriend_request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSrcidFieldNumber = 1,
    kDestidFieldNumber = 2,
  };
  // required int32 srcid = 1;
  bool has_srcid() const;
  private:
  bool _internal_has_srcid() const;
  public:
  void clear_srcid();
  int32_t srcid() const;
  void set_srcid(int32_t value);
  private:
  int32_t _internal_srcid() const;
  void _internal_set_srcid(int32_t value);
  public:

  // required int32 destid = 2;
  bool has_destid() const;
  private:
  bool _internal_has_destid() const;
  public:
  void clear_destid();
  int32_t destid() const;
  void set_destid(int32_t value);
  private:
  int32_t _internal_destid() const;
  void _internal_set_destid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:tutorial.addfriend_request)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int32_t srcid_;
    int32_t destid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protocol_2eproto;
};
// -------------------------------------------------------------------

class addfriend_response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tutorial.addfriend_response) */ {
 public:
  inline addfriend_response() : addfriend_response(nullptr) {}
  ~addfriend_response() override;
  explicit PROTOBUF_CONSTEXPR addfriend_response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  addfriend_response(const addfriend_response& from);
  addfriend_response(addfriend_response&& from) noexcept
    : addfriend_response() {
    *this = ::std::move(from);
  }

  inline addfriend_response& operator=(const addfriend_response& from) {
    CopyFrom(from);
    return *this;
  }
  inline addfriend_response& operator=(addfriend_response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const addfriend_response& default_instance() {
    return *internal_default_instance();
  }
  static inline const addfriend_response* internal_default_instance() {
    return reinterpret_cast<const addfriend_response*>(
               &_addfriend_response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(addfriend_response& a, addfriend_response& b) {
    a.Swap(&b);
  }
  inline void Swap(addfriend_response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(addfriend_response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  addfriend_response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<addfriend_response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const addfriend_response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const addfriend_response& from) {
    addfriend_response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(addfriend_response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tutorial.addfriend_response";
  }
  protected:
  explicit addfriend_response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSiFieldNumber = 2,
    kDestidFieldNumber = 1,
  };
  // required .tutorial.userinfo si = 2;
  bool has_si() const;
  private:
  bool _internal_has_si() const;
  public:
  void clear_si();
  const ::tutorial::userinfo& si() const;
  PROTOBUF_NODISCARD ::tutorial::userinfo* release_si();
  ::tutorial::userinfo* mutable_si();
  void set_allocated_si(::tutorial::userinfo* si);
  private:
  const ::tutorial::userinfo& _internal_si() const;
  ::tutorial::userinfo* _internal_mutable_si();
  public:
  void unsafe_arena_set_allocated_si(
      ::tutorial::userinfo* si);
  ::tutorial::userinfo* unsafe_arena_release_si();

  // required int32 destid = 1;
  bool has_destid() const;
  private:
  bool _internal_has_destid() const;
  public:
  void clear_destid();
  int32_t destid() const;
  void set_destid(int32_t value);
  private:
  int32_t _internal_destid() const;
  void _internal_set_destid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:tutorial.addfriend_response)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::tutorial::userinfo* si_;
    int32_t destid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protocol_2eproto;
};
// -------------------------------------------------------------------

class addfriend_result_request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tutorial.addfriend_result_request) */ {
 public:
  inline addfriend_result_request() : addfriend_result_request(nullptr) {}
  ~addfriend_result_request() override;
  explicit PROTOBUF_CONSTEXPR addfriend_result_request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  addfriend_result_request(const addfriend_result_request& from);
  addfriend_result_request(addfriend_result_request&& from) noexcept
    : addfriend_result_request() {
    *this = ::std::move(from);
  }

  inline addfriend_result_request& operator=(const addfriend_result_request& from) {
    CopyFrom(from);
    return *this;
  }
  inline addfriend_result_request& operator=(addfriend_result_request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const addfriend_result_request& default_instance() {
    return *internal_default_instance();
  }
  static inline const addfriend_result_request* internal_default_instance() {
    return reinterpret_cast<const addfriend_result_request*>(
               &_addfriend_result_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(addfriend_result_request& a, addfriend_result_request& b) {
    a.Swap(&b);
  }
  inline void Swap(addfriend_result_request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(addfriend_result_request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  addfriend_result_request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<addfriend_result_request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const addfriend_result_request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const addfriend_result_request& from) {
    addfriend_result_request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(addfriend_result_request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tutorial.addfriend_result_request";
  }
  protected:
  explicit addfriend_result_request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSrcidFieldNumber = 1,
    kDestidFieldNumber = 2,
    kAddresultFieldNumber = 3,
  };
  // required int32 srcid = 1;
  bool has_srcid() const;
  private:
  bool _internal_has_srcid() const;
  public:
  void clear_srcid();
  int32_t srcid() const;
  void set_srcid(int32_t value);
  private:
  int32_t _internal_srcid() const;
  void _internal_set_srcid(int32_t value);
  public:

  // required int32 destid = 2;
  bool has_destid() const;
  private:
  bool _internal_has_destid() const;
  public:
  void clear_destid();
  int32_t destid() const;
  void set_destid(int32_t value);
  private:
  int32_t _internal_destid() const;
  void _internal_set_destid(int32_t value);
  public:

  // required bool addresult = 3;
  bool has_addresult() const;
  private:
  bool _internal_has_addresult() const;
  public:
  void clear_addresult();
  bool addresult() const;
  void set_addresult(bool value);
  private:
  bool _internal_addresult() const;
  void _internal_set_addresult(bool value);
  public:

  // @@protoc_insertion_point(class_scope:tutorial.addfriend_result_request)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int32_t srcid_;
    int32_t destid_;
    bool addresult_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protocol_2eproto;
};
// -------------------------------------------------------------------

class addfriend_result_response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tutorial.addfriend_result_response) */ {
 public:
  inline addfriend_result_response() : addfriend_result_response(nullptr) {}
  ~addfriend_result_response() override;
  explicit PROTOBUF_CONSTEXPR addfriend_result_response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  addfriend_result_response(const addfriend_result_response& from);
  addfriend_result_response(addfriend_result_response&& from) noexcept
    : addfriend_result_response() {
    *this = ::std::move(from);
  }

  inline addfriend_result_response& operator=(const addfriend_result_response& from) {
    CopyFrom(from);
    return *this;
  }
  inline addfriend_result_response& operator=(addfriend_result_response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const addfriend_result_response& default_instance() {
    return *internal_default_instance();
  }
  static inline const addfriend_result_response* internal_default_instance() {
    return reinterpret_cast<const addfriend_result_response*>(
               &_addfriend_result_response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(addfriend_result_response& a, addfriend_result_response& b) {
    a.Swap(&b);
  }
  inline void Swap(addfriend_result_response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(addfriend_result_response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  addfriend_result_response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<addfriend_result_response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const addfriend_result_response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const addfriend_result_response& from) {
    addfriend_result_response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(addfriend_result_response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tutorial.addfriend_result_response";
  }
  protected:
  explicit addfriend_result_response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserFieldNumber = 3,
    kSrcidFieldNumber = 1,
    kAddresultFieldNumber = 2,
  };
  // optional .tutorial.userinfo user = 3;
  bool has_user() const;
  private:
  bool _internal_has_user() const;
  public:
  void clear_user();
  const ::tutorial::userinfo& user() const;
  PROTOBUF_NODISCARD ::tutorial::userinfo* release_user();
  ::tutorial::userinfo* mutable_user();
  void set_allocated_user(::tutorial::userinfo* user);
  private:
  const ::tutorial::userinfo& _internal_user() const;
  ::tutorial::userinfo* _internal_mutable_user();
  public:
  void unsafe_arena_set_allocated_user(
      ::tutorial::userinfo* user);
  ::tutorial::userinfo* unsafe_arena_release_user();

  // required int32 srcid = 1;
  bool has_srcid() const;
  private:
  bool _internal_has_srcid() const;
  public:
  void clear_srcid();
  int32_t srcid() const;
  void set_srcid(int32_t value);
  private:
  int32_t _internal_srcid() const;
  void _internal_set_srcid(int32_t value);
  public:

  // required bool addresult = 2;
  bool has_addresult() const;
  private:
  bool _internal_has_addresult() const;
  public:
  void clear_addresult();
  bool addresult() const;
  void set_addresult(bool value);
  private:
  bool _internal_addresult() const;
  void _internal_set_addresult(bool value);
  public:

  // @@protoc_insertion_point(class_scope:tutorial.addfriend_result_response)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::tutorial::userinfo* user_;
    int32_t srcid_;
    bool addresult_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protocol_2eproto;
};
// -------------------------------------------------------------------

class deletefriend_request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tutorial.deletefriend_request) */ {
 public:
  inline deletefriend_request() : deletefriend_request(nullptr) {}
  ~deletefriend_request() override;
  explicit PROTOBUF_CONSTEXPR deletefriend_request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  deletefriend_request(const deletefriend_request& from);
  deletefriend_request(deletefriend_request&& from) noexcept
    : deletefriend_request() {
    *this = ::std::move(from);
  }

  inline deletefriend_request& operator=(const deletefriend_request& from) {
    CopyFrom(from);
    return *this;
  }
  inline deletefriend_request& operator=(deletefriend_request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const deletefriend_request& default_instance() {
    return *internal_default_instance();
  }
  static inline const deletefriend_request* internal_default_instance() {
    return reinterpret_cast<const deletefriend_request*>(
               &_deletefriend_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(deletefriend_request& a, deletefriend_request& b) {
    a.Swap(&b);
  }
  inline void Swap(deletefriend_request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(deletefriend_request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  deletefriend_request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<deletefriend_request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const deletefriend_request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const deletefriend_request& from) {
    deletefriend_request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(deletefriend_request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tutorial.deletefriend_request";
  }
  protected:
  explicit deletefriend_request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSrcidFieldNumber = 1,
    kDestidFieldNumber = 2,
  };
  // required int32 srcid = 1;
  bool has_srcid() const;
  private:
  bool _internal_has_srcid() const;
  public:
  void clear_srcid();
  int32_t srcid() const;
  void set_srcid(int32_t value);
  private:
  int32_t _internal_srcid() const;
  void _internal_set_srcid(int32_t value);
  public:

  // required int32 destid = 2;
  bool has_destid() const;
  private:
  bool _internal_has_destid() const;
  public:
  void clear_destid();
  int32_t destid() const;
  void set_destid(int32_t value);
  private:
  int32_t _internal_destid() const;
  void _internal_set_destid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:tutorial.deletefriend_request)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int32_t srcid_;
    int32_t destid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protocol_2eproto;
};
// -------------------------------------------------------------------

class deletefriend_response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tutorial.deletefriend_response) */ {
 public:
  inline deletefriend_response() : deletefriend_response(nullptr) {}
  ~deletefriend_response() override;
  explicit PROTOBUF_CONSTEXPR deletefriend_response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  deletefriend_response(const deletefriend_response& from);
  deletefriend_response(deletefriend_response&& from) noexcept
    : deletefriend_response() {
    *this = ::std::move(from);
  }

  inline deletefriend_response& operator=(const deletefriend_response& from) {
    CopyFrom(from);
    return *this;
  }
  inline deletefriend_response& operator=(deletefriend_response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const deletefriend_response& default_instance() {
    return *internal_default_instance();
  }
  static inline const deletefriend_response* internal_default_instance() {
    return reinterpret_cast<const deletefriend_response*>(
               &_deletefriend_response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(deletefriend_response& a, deletefriend_response& b) {
    a.Swap(&b);
  }
  inline void Swap(deletefriend_response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(deletefriend_response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  deletefriend_response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<deletefriend_response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const deletefriend_response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const deletefriend_response& from) {
    deletefriend_response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(deletefriend_response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tutorial.deletefriend_response";
  }
  protected:
  explicit deletefriend_response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSrcidFieldNumber = 1,
  };
  // required int32 srcid = 1;
  bool has_srcid() const;
  private:
  bool _internal_has_srcid() const;
  public:
  void clear_srcid();
  int32_t srcid() const;
  void set_srcid(int32_t value);
  private:
  int32_t _internal_srcid() const;
  void _internal_set_srcid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:tutorial.deletefriend_response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int32_t srcid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protocol_2eproto;
};
// -------------------------------------------------------------------

class selectfriend_request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tutorial.selectfriend_request) */ {
 public:
  inline selectfriend_request() : selectfriend_request(nullptr) {}
  ~selectfriend_request() override;
  explicit PROTOBUF_CONSTEXPR selectfriend_request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  selectfriend_request(const selectfriend_request& from);
  selectfriend_request(selectfriend_request&& from) noexcept
    : selectfriend_request() {
    *this = ::std::move(from);
  }

  inline selectfriend_request& operator=(const selectfriend_request& from) {
    CopyFrom(from);
    return *this;
  }
  inline selectfriend_request& operator=(selectfriend_request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const selectfriend_request& default_instance() {
    return *internal_default_instance();
  }
  static inline const selectfriend_request* internal_default_instance() {
    return reinterpret_cast<const selectfriend_request*>(
               &_selectfriend_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(selectfriend_request& a, selectfriend_request& b) {
    a.Swap(&b);
  }
  inline void Swap(selectfriend_request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(selectfriend_request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  selectfriend_request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<selectfriend_request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const selectfriend_request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const selectfriend_request& from) {
    selectfriend_request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(selectfriend_request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tutorial.selectfriend_request";
  }
  protected:
  explicit selectfriend_request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTofinduseridFieldNumber = 1,
  };
  // required int32 tofinduserid = 1;
  bool has_tofinduserid() const;
  private:
  bool _internal_has_tofinduserid() const;
  public:
  void clear_tofinduserid();
  int32_t tofinduserid() const;
  void set_tofinduserid(int32_t value);
  private:
  int32_t _internal_tofinduserid() const;
  void _internal_set_tofinduserid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:tutorial.selectfriend_request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int32_t tofinduserid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protocol_2eproto;
};
// -------------------------------------------------------------------

class selectfriend_response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tutorial.selectfriend_response) */ {
 public:
  inline selectfriend_response() : selectfriend_response(nullptr) {}
  ~selectfriend_response() override;
  explicit PROTOBUF_CONSTEXPR selectfriend_response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  selectfriend_response(const selectfriend_response& from);
  selectfriend_response(selectfriend_response&& from) noexcept
    : selectfriend_response() {
    *this = ::std::move(from);
  }

  inline selectfriend_response& operator=(const selectfriend_response& from) {
    CopyFrom(from);
    return *this;
  }
  inline selectfriend_response& operator=(selectfriend_response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const selectfriend_response& default_instance() {
    return *internal_default_instance();
  }
  static inline const selectfriend_response* internal_default_instance() {
    return reinterpret_cast<const selectfriend_response*>(
               &_selectfriend_response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(selectfriend_response& a, selectfriend_response& b) {
    a.Swap(&b);
  }
  inline void Swap(selectfriend_response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(selectfriend_response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  selectfriend_response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<selectfriend_response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const selectfriend_response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const selectfriend_response& from) {
    selectfriend_response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(selectfriend_response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tutorial.selectfriend_response";
  }
  protected:
  explicit selectfriend_response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsfindFieldNumber = 1,
    kResultidFieldNumber = 2,
  };
  // required bool isfind = 1;
  bool has_isfind() const;
  private:
  bool _internal_has_isfind() const;
  public:
  void clear_isfind();
  bool isfind() const;
  void set_isfind(bool value);
  private:
  bool _internal_isfind() const;
  void _internal_set_isfind(bool value);
  public:

  // optional int32 resultid = 2;
  bool has_resultid() const;
  private:
  bool _internal_has_resultid() const;
  public:
  void clear_resultid();
  int32_t resultid() const;
  void set_resultid(int32_t value);
  private:
  int32_t _internal_resultid() const;
  void _internal_set_resultid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:tutorial.selectfriend_response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool isfind_;
    int32_t resultid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protocol_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// userinfo

// required string name = 1;
inline bool userinfo::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool userinfo::has_name() const {
  return _internal_has_name();
}
inline void userinfo::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& userinfo::name() const {
  // @@protoc_insertion_point(field_get:tutorial.userinfo.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void userinfo::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tutorial.userinfo.name)
}
inline std::string* userinfo::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:tutorial.userinfo.name)
  return _s;
}
inline const std::string& userinfo::_internal_name() const {
  return _impl_.name_.Get();
}
inline void userinfo::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* userinfo::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* userinfo::release_name() {
  // @@protoc_insertion_point(field_release:tutorial.userinfo.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void userinfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tutorial.userinfo.name)
}

// -------------------------------------------------------------------

// mobile_request

// required string mobile = 1;
inline bool mobile_request::_internal_has_mobile() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool mobile_request::has_mobile() const {
  return _internal_has_mobile();
}
inline void mobile_request::clear_mobile() {
  _impl_.mobile_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& mobile_request::mobile() const {
  // @@protoc_insertion_point(field_get:tutorial.mobile_request.mobile)
  return _internal_mobile();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void mobile_request::set_mobile(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.mobile_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tutorial.mobile_request.mobile)
}
inline std::string* mobile_request::mutable_mobile() {
  std::string* _s = _internal_mutable_mobile();
  // @@protoc_insertion_point(field_mutable:tutorial.mobile_request.mobile)
  return _s;
}
inline const std::string& mobile_request::_internal_mobile() const {
  return _impl_.mobile_.Get();
}
inline void mobile_request::_internal_set_mobile(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.mobile_.Set(value, GetArenaForAllocation());
}
inline std::string* mobile_request::_internal_mutable_mobile() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.mobile_.Mutable(GetArenaForAllocation());
}
inline std::string* mobile_request::release_mobile() {
  // @@protoc_insertion_point(field_release:tutorial.mobile_request.mobile)
  if (!_internal_has_mobile()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.mobile_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.mobile_.IsDefault()) {
    _impl_.mobile_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void mobile_request::set_allocated_mobile(std::string* mobile) {
  if (mobile != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.mobile_.SetAllocated(mobile, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.mobile_.IsDefault()) {
    _impl_.mobile_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tutorial.mobile_request.mobile)
}

// -------------------------------------------------------------------

// mobile_response

// required int32 code = 1;
inline bool mobile_response::_internal_has_code() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool mobile_response::has_code() const {
  return _internal_has_code();
}
inline void mobile_response::clear_code() {
  _impl_.code_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t mobile_response::_internal_code() const {
  return _impl_.code_;
}
inline int32_t mobile_response::code() const {
  // @@protoc_insertion_point(field_get:tutorial.mobile_response.code)
  return _internal_code();
}
inline void mobile_response::_internal_set_code(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.code_ = value;
}
inline void mobile_response::set_code(int32_t value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:tutorial.mobile_response.code)
}

// required int32 icode = 2;
inline bool mobile_response::_internal_has_icode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool mobile_response::has_icode() const {
  return _internal_has_icode();
}
inline void mobile_response::clear_icode() {
  _impl_.icode_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t mobile_response::_internal_icode() const {
  return _impl_.icode_;
}
inline int32_t mobile_response::icode() const {
  // @@protoc_insertion_point(field_get:tutorial.mobile_response.icode)
  return _internal_icode();
}
inline void mobile_response::_internal_set_icode(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.icode_ = value;
}
inline void mobile_response::set_icode(int32_t value) {
  _internal_set_icode(value);
  // @@protoc_insertion_point(field_set:tutorial.mobile_response.icode)
}

// optional string data = 3;
inline bool mobile_response::_internal_has_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool mobile_response::has_data() const {
  return _internal_has_data();
}
inline void mobile_response::clear_data() {
  _impl_.data_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& mobile_response::data() const {
  // @@protoc_insertion_point(field_get:tutorial.mobile_response.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void mobile_response::set_data(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.data_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tutorial.mobile_response.data)
}
inline std::string* mobile_response::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:tutorial.mobile_response.data)
  return _s;
}
inline const std::string& mobile_response::_internal_data() const {
  return _impl_.data_.Get();
}
inline void mobile_response::_internal_set_data(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* mobile_response::_internal_mutable_data() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.data_.Mutable(GetArenaForAllocation());
}
inline std::string* mobile_response::release_data() {
  // @@protoc_insertion_point(field_release:tutorial.mobile_response.data)
  if (!_internal_has_data()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.data_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void mobile_response::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tutorial.mobile_response.data)
}

// -------------------------------------------------------------------

// login_request

// required string mobile = 1;
inline bool login_request::_internal_has_mobile() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool login_request::has_mobile() const {
  return _internal_has_mobile();
}
inline void login_request::clear_mobile() {
  _impl_.mobile_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& login_request::mobile() const {
  // @@protoc_insertion_point(field_get:tutorial.login_request.mobile)
  return _internal_mobile();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void login_request::set_mobile(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.mobile_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tutorial.login_request.mobile)
}
inline std::string* login_request::mutable_mobile() {
  std::string* _s = _internal_mutable_mobile();
  // @@protoc_insertion_point(field_mutable:tutorial.login_request.mobile)
  return _s;
}
inline const std::string& login_request::_internal_mobile() const {
  return _impl_.mobile_.Get();
}
inline void login_request::_internal_set_mobile(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.mobile_.Set(value, GetArenaForAllocation());
}
inline std::string* login_request::_internal_mutable_mobile() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.mobile_.Mutable(GetArenaForAllocation());
}
inline std::string* login_request::release_mobile() {
  // @@protoc_insertion_point(field_release:tutorial.login_request.mobile)
  if (!_internal_has_mobile()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.mobile_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.mobile_.IsDefault()) {
    _impl_.mobile_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void login_request::set_allocated_mobile(std::string* mobile) {
  if (mobile != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.mobile_.SetAllocated(mobile, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.mobile_.IsDefault()) {
    _impl_.mobile_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tutorial.login_request.mobile)
}

// required int32 icode = 2;
inline bool login_request::_internal_has_icode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool login_request::has_icode() const {
  return _internal_has_icode();
}
inline void login_request::clear_icode() {
  _impl_.icode_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t login_request::_internal_icode() const {
  return _impl_.icode_;
}
inline int32_t login_request::icode() const {
  // @@protoc_insertion_point(field_get:tutorial.login_request.icode)
  return _internal_icode();
}
inline void login_request::_internal_set_icode(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.icode_ = value;
}
inline void login_request::set_icode(int32_t value) {
  _internal_set_icode(value);
  // @@protoc_insertion_point(field_set:tutorial.login_request.icode)
}

// -------------------------------------------------------------------

// login_response

// required int32 code = 1;
inline bool login_response::_internal_has_code() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool login_response::has_code() const {
  return _internal_has_code();
}
inline void login_response::clear_code() {
  _impl_.code_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t login_response::_internal_code() const {
  return _impl_.code_;
}
inline int32_t login_response::code() const {
  // @@protoc_insertion_point(field_get:tutorial.login_response.code)
  return _internal_code();
}
inline void login_response::_internal_set_code(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.code_ = value;
}
inline void login_response::set_code(int32_t value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:tutorial.login_response.code)
}

// optional string desc = 2;
inline bool login_response::_internal_has_desc() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool login_response::has_desc() const {
  return _internal_has_desc();
}
inline void login_response::clear_desc() {
  _impl_.desc_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& login_response::desc() const {
  // @@protoc_insertion_point(field_get:tutorial.login_response.desc)
  return _internal_desc();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void login_response::set_desc(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.desc_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tutorial.login_response.desc)
}
inline std::string* login_response::mutable_desc() {
  std::string* _s = _internal_mutable_desc();
  // @@protoc_insertion_point(field_mutable:tutorial.login_response.desc)
  return _s;
}
inline const std::string& login_response::_internal_desc() const {
  return _impl_.desc_.Get();
}
inline void login_response::_internal_set_desc(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.desc_.Set(value, GetArenaForAllocation());
}
inline std::string* login_response::_internal_mutable_desc() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.desc_.Mutable(GetArenaForAllocation());
}
inline std::string* login_response::release_desc() {
  // @@protoc_insertion_point(field_release:tutorial.login_response.desc)
  if (!_internal_has_desc()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.desc_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.desc_.IsDefault()) {
    _impl_.desc_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void login_response::set_allocated_desc(std::string* desc) {
  if (desc != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.desc_.SetAllocated(desc, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.desc_.IsDefault()) {
    _impl_.desc_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tutorial.login_response.desc)
}

// -------------------------------------------------------------------

// notify_online_request

// required int32 id = 1;
inline bool notify_online_request::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool notify_online_request::has_id() const {
  return _internal_has_id();
}
inline void notify_online_request::clear_id() {
  _impl_.id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t notify_online_request::_internal_id() const {
  return _impl_.id_;
}
inline int32_t notify_online_request::id() const {
  // @@protoc_insertion_point(field_get:tutorial.notify_online_request.id)
  return _internal_id();
}
inline void notify_online_request::_internal_set_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.id_ = value;
}
inline void notify_online_request::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:tutorial.notify_online_request.id)
}

// required bool state = 2;
inline bool notify_online_request::_internal_has_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool notify_online_request::has_state() const {
  return _internal_has_state();
}
inline void notify_online_request::clear_state() {
  _impl_.state_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool notify_online_request::_internal_state() const {
  return _impl_.state_;
}
inline bool notify_online_request::state() const {
  // @@protoc_insertion_point(field_get:tutorial.notify_online_request.state)
  return _internal_state();
}
inline void notify_online_request::_internal_set_state(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.state_ = value;
}
inline void notify_online_request::set_state(bool value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:tutorial.notify_online_request.state)
}

// -------------------------------------------------------------------

// notify_online_reponse

// required int32 id = 1;
inline bool notify_online_reponse::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool notify_online_reponse::has_id() const {
  return _internal_has_id();
}
inline void notify_online_reponse::clear_id() {
  _impl_.id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t notify_online_reponse::_internal_id() const {
  return _impl_.id_;
}
inline int32_t notify_online_reponse::id() const {
  // @@protoc_insertion_point(field_get:tutorial.notify_online_reponse.id)
  return _internal_id();
}
inline void notify_online_reponse::_internal_set_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.id_ = value;
}
inline void notify_online_reponse::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:tutorial.notify_online_reponse.id)
}

// required bool state = 2;
inline bool notify_online_reponse::_internal_has_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool notify_online_reponse::has_state() const {
  return _internal_has_state();
}
inline void notify_online_reponse::clear_state() {
  _impl_.state_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool notify_online_reponse::_internal_state() const {
  return _impl_.state_;
}
inline bool notify_online_reponse::state() const {
  // @@protoc_insertion_point(field_get:tutorial.notify_online_reponse.state)
  return _internal_state();
}
inline void notify_online_reponse::_internal_set_state(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.state_ = value;
}
inline void notify_online_reponse::set_state(bool value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:tutorial.notify_online_reponse.state)
}

// -------------------------------------------------------------------

// sendtxtmsg_request

// required int32 srcid = 1;
inline bool sendtxtmsg_request::_internal_has_srcid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool sendtxtmsg_request::has_srcid() const {
  return _internal_has_srcid();
}
inline void sendtxtmsg_request::clear_srcid() {
  _impl_.srcid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t sendtxtmsg_request::_internal_srcid() const {
  return _impl_.srcid_;
}
inline int32_t sendtxtmsg_request::srcid() const {
  // @@protoc_insertion_point(field_get:tutorial.sendtxtmsg_request.srcid)
  return _internal_srcid();
}
inline void sendtxtmsg_request::_internal_set_srcid(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.srcid_ = value;
}
inline void sendtxtmsg_request::set_srcid(int32_t value) {
  _internal_set_srcid(value);
  // @@protoc_insertion_point(field_set:tutorial.sendtxtmsg_request.srcid)
}

// required int32 destid = 2;
inline bool sendtxtmsg_request::_internal_has_destid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool sendtxtmsg_request::has_destid() const {
  return _internal_has_destid();
}
inline void sendtxtmsg_request::clear_destid() {
  _impl_.destid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t sendtxtmsg_request::_internal_destid() const {
  return _impl_.destid_;
}
inline int32_t sendtxtmsg_request::destid() const {
  // @@protoc_insertion_point(field_get:tutorial.sendtxtmsg_request.destid)
  return _internal_destid();
}
inline void sendtxtmsg_request::_internal_set_destid(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.destid_ = value;
}
inline void sendtxtmsg_request::set_destid(int32_t value) {
  _internal_set_destid(value);
  // @@protoc_insertion_point(field_set:tutorial.sendtxtmsg_request.destid)
}

// required string chatmessage = 3;
inline bool sendtxtmsg_request::_internal_has_chatmessage() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool sendtxtmsg_request::has_chatmessage() const {
  return _internal_has_chatmessage();
}
inline void sendtxtmsg_request::clear_chatmessage() {
  _impl_.chatmessage_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& sendtxtmsg_request::chatmessage() const {
  // @@protoc_insertion_point(field_get:tutorial.sendtxtmsg_request.chatmessage)
  return _internal_chatmessage();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void sendtxtmsg_request::set_chatmessage(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.chatmessage_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tutorial.sendtxtmsg_request.chatmessage)
}
inline std::string* sendtxtmsg_request::mutable_chatmessage() {
  std::string* _s = _internal_mutable_chatmessage();
  // @@protoc_insertion_point(field_mutable:tutorial.sendtxtmsg_request.chatmessage)
  return _s;
}
inline const std::string& sendtxtmsg_request::_internal_chatmessage() const {
  return _impl_.chatmessage_.Get();
}
inline void sendtxtmsg_request::_internal_set_chatmessage(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.chatmessage_.Set(value, GetArenaForAllocation());
}
inline std::string* sendtxtmsg_request::_internal_mutable_chatmessage() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.chatmessage_.Mutable(GetArenaForAllocation());
}
inline std::string* sendtxtmsg_request::release_chatmessage() {
  // @@protoc_insertion_point(field_release:tutorial.sendtxtmsg_request.chatmessage)
  if (!_internal_has_chatmessage()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.chatmessage_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.chatmessage_.IsDefault()) {
    _impl_.chatmessage_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void sendtxtmsg_request::set_allocated_chatmessage(std::string* chatmessage) {
  if (chatmessage != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.chatmessage_.SetAllocated(chatmessage, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.chatmessage_.IsDefault()) {
    _impl_.chatmessage_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tutorial.sendtxtmsg_request.chatmessage)
}

// -------------------------------------------------------------------

// sendtxtmsg_reponse

// required int32 destid = 1;
inline bool sendtxtmsg_reponse::_internal_has_destid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool sendtxtmsg_reponse::has_destid() const {
  return _internal_has_destid();
}
inline void sendtxtmsg_reponse::clear_destid() {
  _impl_.destid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t sendtxtmsg_reponse::_internal_destid() const {
  return _impl_.destid_;
}
inline int32_t sendtxtmsg_reponse::destid() const {
  // @@protoc_insertion_point(field_get:tutorial.sendtxtmsg_reponse.destid)
  return _internal_destid();
}
inline void sendtxtmsg_reponse::_internal_set_destid(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.destid_ = value;
}
inline void sendtxtmsg_reponse::set_destid(int32_t value) {
  _internal_set_destid(value);
  // @@protoc_insertion_point(field_set:tutorial.sendtxtmsg_reponse.destid)
}

// required string chatmessage = 2;
inline bool sendtxtmsg_reponse::_internal_has_chatmessage() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool sendtxtmsg_reponse::has_chatmessage() const {
  return _internal_has_chatmessage();
}
inline void sendtxtmsg_reponse::clear_chatmessage() {
  _impl_.chatmessage_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& sendtxtmsg_reponse::chatmessage() const {
  // @@protoc_insertion_point(field_get:tutorial.sendtxtmsg_reponse.chatmessage)
  return _internal_chatmessage();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void sendtxtmsg_reponse::set_chatmessage(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.chatmessage_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tutorial.sendtxtmsg_reponse.chatmessage)
}
inline std::string* sendtxtmsg_reponse::mutable_chatmessage() {
  std::string* _s = _internal_mutable_chatmessage();
  // @@protoc_insertion_point(field_mutable:tutorial.sendtxtmsg_reponse.chatmessage)
  return _s;
}
inline const std::string& sendtxtmsg_reponse::_internal_chatmessage() const {
  return _impl_.chatmessage_.Get();
}
inline void sendtxtmsg_reponse::_internal_set_chatmessage(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.chatmessage_.Set(value, GetArenaForAllocation());
}
inline std::string* sendtxtmsg_reponse::_internal_mutable_chatmessage() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.chatmessage_.Mutable(GetArenaForAllocation());
}
inline std::string* sendtxtmsg_reponse::release_chatmessage() {
  // @@protoc_insertion_point(field_release:tutorial.sendtxtmsg_reponse.chatmessage)
  if (!_internal_has_chatmessage()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.chatmessage_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.chatmessage_.IsDefault()) {
    _impl_.chatmessage_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void sendtxtmsg_reponse::set_allocated_chatmessage(std::string* chatmessage) {
  if (chatmessage != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.chatmessage_.SetAllocated(chatmessage, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.chatmessage_.IsDefault()) {
    _impl_.chatmessage_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tutorial.sendtxtmsg_reponse.chatmessage)
}

// -------------------------------------------------------------------

// addfriend_request

// required int32 srcid = 1;
inline bool addfriend_request::_internal_has_srcid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool addfriend_request::has_srcid() const {
  return _internal_has_srcid();
}
inline void addfriend_request::clear_srcid() {
  _impl_.srcid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t addfriend_request::_internal_srcid() const {
  return _impl_.srcid_;
}
inline int32_t addfriend_request::srcid() const {
  // @@protoc_insertion_point(field_get:tutorial.addfriend_request.srcid)
  return _internal_srcid();
}
inline void addfriend_request::_internal_set_srcid(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.srcid_ = value;
}
inline void addfriend_request::set_srcid(int32_t value) {
  _internal_set_srcid(value);
  // @@protoc_insertion_point(field_set:tutorial.addfriend_request.srcid)
}

// required int32 destid = 2;
inline bool addfriend_request::_internal_has_destid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool addfriend_request::has_destid() const {
  return _internal_has_destid();
}
inline void addfriend_request::clear_destid() {
  _impl_.destid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t addfriend_request::_internal_destid() const {
  return _impl_.destid_;
}
inline int32_t addfriend_request::destid() const {
  // @@protoc_insertion_point(field_get:tutorial.addfriend_request.destid)
  return _internal_destid();
}
inline void addfriend_request::_internal_set_destid(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.destid_ = value;
}
inline void addfriend_request::set_destid(int32_t value) {
  _internal_set_destid(value);
  // @@protoc_insertion_point(field_set:tutorial.addfriend_request.destid)
}

// -------------------------------------------------------------------

// addfriend_response

// required int32 destid = 1;
inline bool addfriend_response::_internal_has_destid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool addfriend_response::has_destid() const {
  return _internal_has_destid();
}
inline void addfriend_response::clear_destid() {
  _impl_.destid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t addfriend_response::_internal_destid() const {
  return _impl_.destid_;
}
inline int32_t addfriend_response::destid() const {
  // @@protoc_insertion_point(field_get:tutorial.addfriend_response.destid)
  return _internal_destid();
}
inline void addfriend_response::_internal_set_destid(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.destid_ = value;
}
inline void addfriend_response::set_destid(int32_t value) {
  _internal_set_destid(value);
  // @@protoc_insertion_point(field_set:tutorial.addfriend_response.destid)
}

// required .tutorial.userinfo si = 2;
inline bool addfriend_response::_internal_has_si() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.si_ != nullptr);
  return value;
}
inline bool addfriend_response::has_si() const {
  return _internal_has_si();
}
inline void addfriend_response::clear_si() {
  if (_impl_.si_ != nullptr) _impl_.si_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::tutorial::userinfo& addfriend_response::_internal_si() const {
  const ::tutorial::userinfo* p = _impl_.si_;
  return p != nullptr ? *p : reinterpret_cast<const ::tutorial::userinfo&>(
      ::tutorial::_userinfo_default_instance_);
}
inline const ::tutorial::userinfo& addfriend_response::si() const {
  // @@protoc_insertion_point(field_get:tutorial.addfriend_response.si)
  return _internal_si();
}
inline void addfriend_response::unsafe_arena_set_allocated_si(
    ::tutorial::userinfo* si) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.si_);
  }
  _impl_.si_ = si;
  if (si) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tutorial.addfriend_response.si)
}
inline ::tutorial::userinfo* addfriend_response::release_si() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tutorial::userinfo* temp = _impl_.si_;
  _impl_.si_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tutorial::userinfo* addfriend_response::unsafe_arena_release_si() {
  // @@protoc_insertion_point(field_release:tutorial.addfriend_response.si)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tutorial::userinfo* temp = _impl_.si_;
  _impl_.si_ = nullptr;
  return temp;
}
inline ::tutorial::userinfo* addfriend_response::_internal_mutable_si() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.si_ == nullptr) {
    auto* p = CreateMaybeMessage<::tutorial::userinfo>(GetArenaForAllocation());
    _impl_.si_ = p;
  }
  return _impl_.si_;
}
inline ::tutorial::userinfo* addfriend_response::mutable_si() {
  ::tutorial::userinfo* _msg = _internal_mutable_si();
  // @@protoc_insertion_point(field_mutable:tutorial.addfriend_response.si)
  return _msg;
}
inline void addfriend_response::set_allocated_si(::tutorial::userinfo* si) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.si_;
  }
  if (si) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(si);
    if (message_arena != submessage_arena) {
      si = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, si, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.si_ = si;
  // @@protoc_insertion_point(field_set_allocated:tutorial.addfriend_response.si)
}

// -------------------------------------------------------------------

// addfriend_result_request

// required int32 srcid = 1;
inline bool addfriend_result_request::_internal_has_srcid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool addfriend_result_request::has_srcid() const {
  return _internal_has_srcid();
}
inline void addfriend_result_request::clear_srcid() {
  _impl_.srcid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t addfriend_result_request::_internal_srcid() const {
  return _impl_.srcid_;
}
inline int32_t addfriend_result_request::srcid() const {
  // @@protoc_insertion_point(field_get:tutorial.addfriend_result_request.srcid)
  return _internal_srcid();
}
inline void addfriend_result_request::_internal_set_srcid(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.srcid_ = value;
}
inline void addfriend_result_request::set_srcid(int32_t value) {
  _internal_set_srcid(value);
  // @@protoc_insertion_point(field_set:tutorial.addfriend_result_request.srcid)
}

// required int32 destid = 2;
inline bool addfriend_result_request::_internal_has_destid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool addfriend_result_request::has_destid() const {
  return _internal_has_destid();
}
inline void addfriend_result_request::clear_destid() {
  _impl_.destid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t addfriend_result_request::_internal_destid() const {
  return _impl_.destid_;
}
inline int32_t addfriend_result_request::destid() const {
  // @@protoc_insertion_point(field_get:tutorial.addfriend_result_request.destid)
  return _internal_destid();
}
inline void addfriend_result_request::_internal_set_destid(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.destid_ = value;
}
inline void addfriend_result_request::set_destid(int32_t value) {
  _internal_set_destid(value);
  // @@protoc_insertion_point(field_set:tutorial.addfriend_result_request.destid)
}

// required bool addresult = 3;
inline bool addfriend_result_request::_internal_has_addresult() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool addfriend_result_request::has_addresult() const {
  return _internal_has_addresult();
}
inline void addfriend_result_request::clear_addresult() {
  _impl_.addresult_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool addfriend_result_request::_internal_addresult() const {
  return _impl_.addresult_;
}
inline bool addfriend_result_request::addresult() const {
  // @@protoc_insertion_point(field_get:tutorial.addfriend_result_request.addresult)
  return _internal_addresult();
}
inline void addfriend_result_request::_internal_set_addresult(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.addresult_ = value;
}
inline void addfriend_result_request::set_addresult(bool value) {
  _internal_set_addresult(value);
  // @@protoc_insertion_point(field_set:tutorial.addfriend_result_request.addresult)
}

// -------------------------------------------------------------------

// addfriend_result_response

// required int32 srcid = 1;
inline bool addfriend_result_response::_internal_has_srcid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool addfriend_result_response::has_srcid() const {
  return _internal_has_srcid();
}
inline void addfriend_result_response::clear_srcid() {
  _impl_.srcid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t addfriend_result_response::_internal_srcid() const {
  return _impl_.srcid_;
}
inline int32_t addfriend_result_response::srcid() const {
  // @@protoc_insertion_point(field_get:tutorial.addfriend_result_response.srcid)
  return _internal_srcid();
}
inline void addfriend_result_response::_internal_set_srcid(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.srcid_ = value;
}
inline void addfriend_result_response::set_srcid(int32_t value) {
  _internal_set_srcid(value);
  // @@protoc_insertion_point(field_set:tutorial.addfriend_result_response.srcid)
}

// required bool addresult = 2;
inline bool addfriend_result_response::_internal_has_addresult() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool addfriend_result_response::has_addresult() const {
  return _internal_has_addresult();
}
inline void addfriend_result_response::clear_addresult() {
  _impl_.addresult_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool addfriend_result_response::_internal_addresult() const {
  return _impl_.addresult_;
}
inline bool addfriend_result_response::addresult() const {
  // @@protoc_insertion_point(field_get:tutorial.addfriend_result_response.addresult)
  return _internal_addresult();
}
inline void addfriend_result_response::_internal_set_addresult(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.addresult_ = value;
}
inline void addfriend_result_response::set_addresult(bool value) {
  _internal_set_addresult(value);
  // @@protoc_insertion_point(field_set:tutorial.addfriend_result_response.addresult)
}

// optional .tutorial.userinfo user = 3;
inline bool addfriend_result_response::_internal_has_user() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.user_ != nullptr);
  return value;
}
inline bool addfriend_result_response::has_user() const {
  return _internal_has_user();
}
inline void addfriend_result_response::clear_user() {
  if (_impl_.user_ != nullptr) _impl_.user_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::tutorial::userinfo& addfriend_result_response::_internal_user() const {
  const ::tutorial::userinfo* p = _impl_.user_;
  return p != nullptr ? *p : reinterpret_cast<const ::tutorial::userinfo&>(
      ::tutorial::_userinfo_default_instance_);
}
inline const ::tutorial::userinfo& addfriend_result_response::user() const {
  // @@protoc_insertion_point(field_get:tutorial.addfriend_result_response.user)
  return _internal_user();
}
inline void addfriend_result_response::unsafe_arena_set_allocated_user(
    ::tutorial::userinfo* user) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.user_);
  }
  _impl_.user_ = user;
  if (user) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tutorial.addfriend_result_response.user)
}
inline ::tutorial::userinfo* addfriend_result_response::release_user() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tutorial::userinfo* temp = _impl_.user_;
  _impl_.user_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tutorial::userinfo* addfriend_result_response::unsafe_arena_release_user() {
  // @@protoc_insertion_point(field_release:tutorial.addfriend_result_response.user)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tutorial::userinfo* temp = _impl_.user_;
  _impl_.user_ = nullptr;
  return temp;
}
inline ::tutorial::userinfo* addfriend_result_response::_internal_mutable_user() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.user_ == nullptr) {
    auto* p = CreateMaybeMessage<::tutorial::userinfo>(GetArenaForAllocation());
    _impl_.user_ = p;
  }
  return _impl_.user_;
}
inline ::tutorial::userinfo* addfriend_result_response::mutable_user() {
  ::tutorial::userinfo* _msg = _internal_mutable_user();
  // @@protoc_insertion_point(field_mutable:tutorial.addfriend_result_response.user)
  return _msg;
}
inline void addfriend_result_response::set_allocated_user(::tutorial::userinfo* user) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.user_;
  }
  if (user) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(user);
    if (message_arena != submessage_arena) {
      user = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.user_ = user;
  // @@protoc_insertion_point(field_set_allocated:tutorial.addfriend_result_response.user)
}

// -------------------------------------------------------------------

// deletefriend_request

// required int32 srcid = 1;
inline bool deletefriend_request::_internal_has_srcid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool deletefriend_request::has_srcid() const {
  return _internal_has_srcid();
}
inline void deletefriend_request::clear_srcid() {
  _impl_.srcid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t deletefriend_request::_internal_srcid() const {
  return _impl_.srcid_;
}
inline int32_t deletefriend_request::srcid() const {
  // @@protoc_insertion_point(field_get:tutorial.deletefriend_request.srcid)
  return _internal_srcid();
}
inline void deletefriend_request::_internal_set_srcid(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.srcid_ = value;
}
inline void deletefriend_request::set_srcid(int32_t value) {
  _internal_set_srcid(value);
  // @@protoc_insertion_point(field_set:tutorial.deletefriend_request.srcid)
}

// required int32 destid = 2;
inline bool deletefriend_request::_internal_has_destid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool deletefriend_request::has_destid() const {
  return _internal_has_destid();
}
inline void deletefriend_request::clear_destid() {
  _impl_.destid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t deletefriend_request::_internal_destid() const {
  return _impl_.destid_;
}
inline int32_t deletefriend_request::destid() const {
  // @@protoc_insertion_point(field_get:tutorial.deletefriend_request.destid)
  return _internal_destid();
}
inline void deletefriend_request::_internal_set_destid(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.destid_ = value;
}
inline void deletefriend_request::set_destid(int32_t value) {
  _internal_set_destid(value);
  // @@protoc_insertion_point(field_set:tutorial.deletefriend_request.destid)
}

// -------------------------------------------------------------------

// deletefriend_response

// required int32 srcid = 1;
inline bool deletefriend_response::_internal_has_srcid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool deletefriend_response::has_srcid() const {
  return _internal_has_srcid();
}
inline void deletefriend_response::clear_srcid() {
  _impl_.srcid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t deletefriend_response::_internal_srcid() const {
  return _impl_.srcid_;
}
inline int32_t deletefriend_response::srcid() const {
  // @@protoc_insertion_point(field_get:tutorial.deletefriend_response.srcid)
  return _internal_srcid();
}
inline void deletefriend_response::_internal_set_srcid(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.srcid_ = value;
}
inline void deletefriend_response::set_srcid(int32_t value) {
  _internal_set_srcid(value);
  // @@protoc_insertion_point(field_set:tutorial.deletefriend_response.srcid)
}

// -------------------------------------------------------------------

// selectfriend_request

// required int32 tofinduserid = 1;
inline bool selectfriend_request::_internal_has_tofinduserid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool selectfriend_request::has_tofinduserid() const {
  return _internal_has_tofinduserid();
}
inline void selectfriend_request::clear_tofinduserid() {
  _impl_.tofinduserid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t selectfriend_request::_internal_tofinduserid() const {
  return _impl_.tofinduserid_;
}
inline int32_t selectfriend_request::tofinduserid() const {
  // @@protoc_insertion_point(field_get:tutorial.selectfriend_request.tofinduserid)
  return _internal_tofinduserid();
}
inline void selectfriend_request::_internal_set_tofinduserid(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.tofinduserid_ = value;
}
inline void selectfriend_request::set_tofinduserid(int32_t value) {
  _internal_set_tofinduserid(value);
  // @@protoc_insertion_point(field_set:tutorial.selectfriend_request.tofinduserid)
}

// -------------------------------------------------------------------

// selectfriend_response

// required bool isfind = 1;
inline bool selectfriend_response::_internal_has_isfind() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool selectfriend_response::has_isfind() const {
  return _internal_has_isfind();
}
inline void selectfriend_response::clear_isfind() {
  _impl_.isfind_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool selectfriend_response::_internal_isfind() const {
  return _impl_.isfind_;
}
inline bool selectfriend_response::isfind() const {
  // @@protoc_insertion_point(field_get:tutorial.selectfriend_response.isfind)
  return _internal_isfind();
}
inline void selectfriend_response::_internal_set_isfind(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.isfind_ = value;
}
inline void selectfriend_response::set_isfind(bool value) {
  _internal_set_isfind(value);
  // @@protoc_insertion_point(field_set:tutorial.selectfriend_response.isfind)
}

// optional int32 resultid = 2;
inline bool selectfriend_response::_internal_has_resultid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool selectfriend_response::has_resultid() const {
  return _internal_has_resultid();
}
inline void selectfriend_response::clear_resultid() {
  _impl_.resultid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t selectfriend_response::_internal_resultid() const {
  return _impl_.resultid_;
}
inline int32_t selectfriend_response::resultid() const {
  // @@protoc_insertion_point(field_get:tutorial.selectfriend_response.resultid)
  return _internal_resultid();
}
inline void selectfriend_response::_internal_set_resultid(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.resultid_ = value;
}
inline void selectfriend_response::set_resultid(int32_t value) {
  _internal_set_resultid(value);
  // @@protoc_insertion_point(field_set:tutorial.selectfriend_response.resultid)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace tutorial

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protocol_2eproto
