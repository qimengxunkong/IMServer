// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol.proto

#include "protocol.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace tutorial {
PROTOBUF_CONSTEXPR userinfo::userinfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct userinfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR userinfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~userinfoDefaultTypeInternal() {}
  union {
    userinfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 userinfoDefaultTypeInternal _userinfo_default_instance_;
PROTOBUF_CONSTEXPR mobile_request::mobile_request(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mobile_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct mobile_requestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR mobile_requestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~mobile_requestDefaultTypeInternal() {}
  union {
    mobile_request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 mobile_requestDefaultTypeInternal _mobile_request_default_instance_;
PROTOBUF_CONSTEXPR mobile_response::mobile_response(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.code_)*/0
  , /*decltype(_impl_.icode_)*/0} {}
struct mobile_responseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR mobile_responseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~mobile_responseDefaultTypeInternal() {}
  union {
    mobile_response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 mobile_responseDefaultTypeInternal _mobile_response_default_instance_;
PROTOBUF_CONSTEXPR login_request::login_request(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mobile_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.icode_)*/0} {}
struct login_requestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR login_requestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~login_requestDefaultTypeInternal() {}
  union {
    login_request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 login_requestDefaultTypeInternal _login_request_default_instance_;
PROTOBUF_CONSTEXPR login_response::login_response(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.desc_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.code_)*/0} {}
struct login_responseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR login_responseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~login_responseDefaultTypeInternal() {}
  union {
    login_response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 login_responseDefaultTypeInternal _login_response_default_instance_;
PROTOBUF_CONSTEXPR notify_online_request::notify_online_request(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_.state_)*/false} {}
struct notify_online_requestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR notify_online_requestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~notify_online_requestDefaultTypeInternal() {}
  union {
    notify_online_request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 notify_online_requestDefaultTypeInternal _notify_online_request_default_instance_;
PROTOBUF_CONSTEXPR notify_online_reponse::notify_online_reponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_.state_)*/false} {}
struct notify_online_reponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR notify_online_reponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~notify_online_reponseDefaultTypeInternal() {}
  union {
    notify_online_reponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 notify_online_reponseDefaultTypeInternal _notify_online_reponse_default_instance_;
PROTOBUF_CONSTEXPR sendtxtmsg_request::sendtxtmsg_request(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.chatmessage_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.srcid_)*/0
  , /*decltype(_impl_.destid_)*/0} {}
struct sendtxtmsg_requestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR sendtxtmsg_requestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~sendtxtmsg_requestDefaultTypeInternal() {}
  union {
    sendtxtmsg_request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 sendtxtmsg_requestDefaultTypeInternal _sendtxtmsg_request_default_instance_;
PROTOBUF_CONSTEXPR sendtxtmsg_reponse::sendtxtmsg_reponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.chatmessage_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.destid_)*/0} {}
struct sendtxtmsg_reponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR sendtxtmsg_reponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~sendtxtmsg_reponseDefaultTypeInternal() {}
  union {
    sendtxtmsg_reponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 sendtxtmsg_reponseDefaultTypeInternal _sendtxtmsg_reponse_default_instance_;
PROTOBUF_CONSTEXPR addfriend_request::addfriend_request(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.srcid_)*/0
  , /*decltype(_impl_.destid_)*/0} {}
struct addfriend_requestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR addfriend_requestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~addfriend_requestDefaultTypeInternal() {}
  union {
    addfriend_request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 addfriend_requestDefaultTypeInternal _addfriend_request_default_instance_;
PROTOBUF_CONSTEXPR addfriend_response::addfriend_response(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.si_)*/nullptr
  , /*decltype(_impl_.destid_)*/0} {}
struct addfriend_responseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR addfriend_responseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~addfriend_responseDefaultTypeInternal() {}
  union {
    addfriend_response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 addfriend_responseDefaultTypeInternal _addfriend_response_default_instance_;
PROTOBUF_CONSTEXPR addfriend_result_request::addfriend_result_request(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.srcid_)*/0
  , /*decltype(_impl_.destid_)*/0
  , /*decltype(_impl_.addresult_)*/false} {}
struct addfriend_result_requestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR addfriend_result_requestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~addfriend_result_requestDefaultTypeInternal() {}
  union {
    addfriend_result_request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 addfriend_result_requestDefaultTypeInternal _addfriend_result_request_default_instance_;
PROTOBUF_CONSTEXPR addfriend_result_response::addfriend_result_response(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.user_)*/nullptr
  , /*decltype(_impl_.srcid_)*/0
  , /*decltype(_impl_.addresult_)*/false} {}
struct addfriend_result_responseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR addfriend_result_responseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~addfriend_result_responseDefaultTypeInternal() {}
  union {
    addfriend_result_response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 addfriend_result_responseDefaultTypeInternal _addfriend_result_response_default_instance_;
PROTOBUF_CONSTEXPR deletefriend_request::deletefriend_request(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.srcid_)*/0
  , /*decltype(_impl_.destid_)*/0} {}
struct deletefriend_requestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR deletefriend_requestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~deletefriend_requestDefaultTypeInternal() {}
  union {
    deletefriend_request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 deletefriend_requestDefaultTypeInternal _deletefriend_request_default_instance_;
PROTOBUF_CONSTEXPR deletefriend_response::deletefriend_response(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.srcid_)*/0} {}
struct deletefriend_responseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR deletefriend_responseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~deletefriend_responseDefaultTypeInternal() {}
  union {
    deletefriend_response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 deletefriend_responseDefaultTypeInternal _deletefriend_response_default_instance_;
PROTOBUF_CONSTEXPR selectfriend_request::selectfriend_request(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.tofinduserid_)*/0} {}
struct selectfriend_requestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR selectfriend_requestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~selectfriend_requestDefaultTypeInternal() {}
  union {
    selectfriend_request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 selectfriend_requestDefaultTypeInternal _selectfriend_request_default_instance_;
PROTOBUF_CONSTEXPR selectfriend_response::selectfriend_response(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.isfind_)*/false
  , /*decltype(_impl_.resultid_)*/0} {}
struct selectfriend_responseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR selectfriend_responseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~selectfriend_responseDefaultTypeInternal() {}
  union {
    selectfriend_response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 selectfriend_responseDefaultTypeInternal _selectfriend_response_default_instance_;
}  // namespace tutorial
static ::_pb::Metadata file_level_metadata_protocol_2eproto[17];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_protocol_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_protocol_2eproto = nullptr;

const uint32_t TableStruct_protocol_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::tutorial::userinfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::tutorial::userinfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tutorial::userinfo, _impl_.name_),
  0,
  PROTOBUF_FIELD_OFFSET(::tutorial::mobile_request, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::tutorial::mobile_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tutorial::mobile_request, _impl_.mobile_),
  0,
  PROTOBUF_FIELD_OFFSET(::tutorial::mobile_response, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::tutorial::mobile_response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tutorial::mobile_response, _impl_.code_),
  PROTOBUF_FIELD_OFFSET(::tutorial::mobile_response, _impl_.icode_),
  PROTOBUF_FIELD_OFFSET(::tutorial::mobile_response, _impl_.data_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::tutorial::login_request, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::tutorial::login_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tutorial::login_request, _impl_.mobile_),
  PROTOBUF_FIELD_OFFSET(::tutorial::login_request, _impl_.icode_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::tutorial::login_response, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::tutorial::login_response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tutorial::login_response, _impl_.code_),
  PROTOBUF_FIELD_OFFSET(::tutorial::login_response, _impl_.desc_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::tutorial::notify_online_request, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::tutorial::notify_online_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tutorial::notify_online_request, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::tutorial::notify_online_request, _impl_.state_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::tutorial::notify_online_reponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::tutorial::notify_online_reponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tutorial::notify_online_reponse, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::tutorial::notify_online_reponse, _impl_.state_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::tutorial::sendtxtmsg_request, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::tutorial::sendtxtmsg_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tutorial::sendtxtmsg_request, _impl_.srcid_),
  PROTOBUF_FIELD_OFFSET(::tutorial::sendtxtmsg_request, _impl_.destid_),
  PROTOBUF_FIELD_OFFSET(::tutorial::sendtxtmsg_request, _impl_.chatmessage_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::tutorial::sendtxtmsg_reponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::tutorial::sendtxtmsg_reponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tutorial::sendtxtmsg_reponse, _impl_.destid_),
  PROTOBUF_FIELD_OFFSET(::tutorial::sendtxtmsg_reponse, _impl_.chatmessage_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::tutorial::addfriend_request, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::tutorial::addfriend_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tutorial::addfriend_request, _impl_.srcid_),
  PROTOBUF_FIELD_OFFSET(::tutorial::addfriend_request, _impl_.destid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::tutorial::addfriend_response, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::tutorial::addfriend_response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tutorial::addfriend_response, _impl_.destid_),
  PROTOBUF_FIELD_OFFSET(::tutorial::addfriend_response, _impl_.si_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::tutorial::addfriend_result_request, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::tutorial::addfriend_result_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tutorial::addfriend_result_request, _impl_.srcid_),
  PROTOBUF_FIELD_OFFSET(::tutorial::addfriend_result_request, _impl_.destid_),
  PROTOBUF_FIELD_OFFSET(::tutorial::addfriend_result_request, _impl_.addresult_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::tutorial::addfriend_result_response, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::tutorial::addfriend_result_response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tutorial::addfriend_result_response, _impl_.srcid_),
  PROTOBUF_FIELD_OFFSET(::tutorial::addfriend_result_response, _impl_.addresult_),
  PROTOBUF_FIELD_OFFSET(::tutorial::addfriend_result_response, _impl_.user_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::tutorial::deletefriend_request, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::tutorial::deletefriend_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tutorial::deletefriend_request, _impl_.srcid_),
  PROTOBUF_FIELD_OFFSET(::tutorial::deletefriend_request, _impl_.destid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::tutorial::deletefriend_response, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::tutorial::deletefriend_response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tutorial::deletefriend_response, _impl_.srcid_),
  0,
  PROTOBUF_FIELD_OFFSET(::tutorial::selectfriend_request, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::tutorial::selectfriend_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tutorial::selectfriend_request, _impl_.tofinduserid_),
  0,
  PROTOBUF_FIELD_OFFSET(::tutorial::selectfriend_response, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::tutorial::selectfriend_response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tutorial::selectfriend_response, _impl_.isfind_),
  PROTOBUF_FIELD_OFFSET(::tutorial::selectfriend_response, _impl_.resultid_),
  0,
  1,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, -1, sizeof(::tutorial::userinfo)},
  { 8, 15, -1, sizeof(::tutorial::mobile_request)},
  { 16, 25, -1, sizeof(::tutorial::mobile_response)},
  { 28, 36, -1, sizeof(::tutorial::login_request)},
  { 38, 46, -1, sizeof(::tutorial::login_response)},
  { 48, 56, -1, sizeof(::tutorial::notify_online_request)},
  { 58, 66, -1, sizeof(::tutorial::notify_online_reponse)},
  { 68, 77, -1, sizeof(::tutorial::sendtxtmsg_request)},
  { 80, 88, -1, sizeof(::tutorial::sendtxtmsg_reponse)},
  { 90, 98, -1, sizeof(::tutorial::addfriend_request)},
  { 100, 108, -1, sizeof(::tutorial::addfriend_response)},
  { 110, 119, -1, sizeof(::tutorial::addfriend_result_request)},
  { 122, 131, -1, sizeof(::tutorial::addfriend_result_response)},
  { 134, 142, -1, sizeof(::tutorial::deletefriend_request)},
  { 144, 151, -1, sizeof(::tutorial::deletefriend_response)},
  { 152, 159, -1, sizeof(::tutorial::selectfriend_request)},
  { 160, 168, -1, sizeof(::tutorial::selectfriend_response)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::tutorial::_userinfo_default_instance_._instance,
  &::tutorial::_mobile_request_default_instance_._instance,
  &::tutorial::_mobile_response_default_instance_._instance,
  &::tutorial::_login_request_default_instance_._instance,
  &::tutorial::_login_response_default_instance_._instance,
  &::tutorial::_notify_online_request_default_instance_._instance,
  &::tutorial::_notify_online_reponse_default_instance_._instance,
  &::tutorial::_sendtxtmsg_request_default_instance_._instance,
  &::tutorial::_sendtxtmsg_reponse_default_instance_._instance,
  &::tutorial::_addfriend_request_default_instance_._instance,
  &::tutorial::_addfriend_response_default_instance_._instance,
  &::tutorial::_addfriend_result_request_default_instance_._instance,
  &::tutorial::_addfriend_result_response_default_instance_._instance,
  &::tutorial::_deletefriend_request_default_instance_._instance,
  &::tutorial::_deletefriend_response_default_instance_._instance,
  &::tutorial::_selectfriend_request_default_instance_._instance,
  &::tutorial::_selectfriend_response_default_instance_._instance,
};

const char descriptor_table_protodef_protocol_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016protocol.proto\022\010tutorial\"\030\n\010userinfo\022\014"
  "\n\004name\030\001 \002(\t\" \n\016mobile_request\022\016\n\006mobile"
  "\030\001 \002(\t\"<\n\017mobile_response\022\014\n\004code\030\001 \002(\005\022"
  "\r\n\005icode\030\002 \002(\005\022\014\n\004data\030\003 \001(\t\".\n\rlogin_re"
  "quest\022\016\n\006mobile\030\001 \002(\t\022\r\n\005icode\030\002 \002(\005\",\n\016"
  "login_response\022\014\n\004code\030\001 \002(\005\022\014\n\004desc\030\002 \001"
  "(\t\"2\n\025notify_online_request\022\n\n\002id\030\001 \002(\005\022"
  "\r\n\005state\030\002 \002(\010\"2\n\025notify_online_reponse\022"
  "\n\n\002id\030\001 \002(\005\022\r\n\005state\030\002 \002(\010\"H\n\022sendtxtmsg"
  "_request\022\r\n\005srcid\030\001 \002(\005\022\016\n\006destid\030\002 \002(\005\022"
  "\023\n\013chatmessage\030\003 \002(\t\"9\n\022sendtxtmsg_repon"
  "se\022\016\n\006destid\030\001 \002(\005\022\023\n\013chatmessage\030\002 \002(\t\""
  "2\n\021addfriend_request\022\r\n\005srcid\030\001 \002(\005\022\016\n\006d"
  "estid\030\002 \002(\005\"D\n\022addfriend_response\022\016\n\006des"
  "tid\030\001 \002(\005\022\036\n\002si\030\002 \002(\0132\022.tutorial.userinf"
  "o\"L\n\030addfriend_result_request\022\r\n\005srcid\030\001"
  " \002(\005\022\016\n\006destid\030\002 \002(\005\022\021\n\taddresult\030\003 \002(\010\""
  "_\n\031addfriend_result_response\022\r\n\005srcid\030\001 "
  "\002(\005\022\021\n\taddresult\030\002 \002(\010\022 \n\004user\030\003 \001(\0132\022.t"
  "utorial.userinfo\"5\n\024deletefriend_request"
  "\022\r\n\005srcid\030\001 \002(\005\022\016\n\006destid\030\002 \002(\005\"&\n\025delet"
  "efriend_response\022\r\n\005srcid\030\001 \002(\005\",\n\024selec"
  "tfriend_request\022\024\n\014tofinduserid\030\001 \002(\005\"9\n"
  "\025selectfriend_response\022\016\n\006isfind\030\001 \002(\010\022\020"
  "\n\010resultid\030\002 \001(\005"
  ;
static ::_pbi::once_flag descriptor_table_protocol_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_protocol_2eproto = {
    false, false, 976, descriptor_table_protodef_protocol_2eproto,
    "protocol.proto",
    &descriptor_table_protocol_2eproto_once, nullptr, 0, 17,
    schemas, file_default_instances, TableStruct_protocol_2eproto::offsets,
    file_level_metadata_protocol_2eproto, file_level_enum_descriptors_protocol_2eproto,
    file_level_service_descriptors_protocol_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_protocol_2eproto_getter() {
  return &descriptor_table_protocol_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_protocol_2eproto(&descriptor_table_protocol_2eproto);
namespace tutorial {

// ===================================================================

class userinfo::_Internal {
 public:
  using HasBits = decltype(std::declval<userinfo>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

userinfo::userinfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tutorial.userinfo)
}
userinfo::userinfo(const userinfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  userinfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:tutorial.userinfo)
}

inline void userinfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

userinfo::~userinfo() {
  // @@protoc_insertion_point(destructor:tutorial.userinfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void userinfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void userinfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void userinfo::Clear() {
// @@protoc_insertion_point(message_clear_start:tutorial.userinfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.name_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* userinfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "tutorial.userinfo.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* userinfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tutorial.userinfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "tutorial.userinfo.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tutorial.userinfo)
  return target;
}

size_t userinfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tutorial.userinfo)
  size_t total_size = 0;

  // required string name = 1;
  if (_internal_has_name()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData userinfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    userinfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*userinfo::GetClassData() const { return &_class_data_; }


void userinfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<userinfo*>(&to_msg);
  auto& from = static_cast<const userinfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tutorial.userinfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_name()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void userinfo::CopyFrom(const userinfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tutorial.userinfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool userinfo::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void userinfo::InternalSwap(userinfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata userinfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protocol_2eproto_getter, &descriptor_table_protocol_2eproto_once,
      file_level_metadata_protocol_2eproto[0]);
}

// ===================================================================

class mobile_request::_Internal {
 public:
  using HasBits = decltype(std::declval<mobile_request>()._impl_._has_bits_);
  static void set_has_mobile(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

mobile_request::mobile_request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tutorial.mobile_request)
}
mobile_request::mobile_request(const mobile_request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  mobile_request* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mobile_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.mobile_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mobile_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_mobile()) {
    _this->_impl_.mobile_.Set(from._internal_mobile(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:tutorial.mobile_request)
}

inline void mobile_request::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mobile_){}
  };
  _impl_.mobile_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mobile_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

mobile_request::~mobile_request() {
  // @@protoc_insertion_point(destructor:tutorial.mobile_request)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void mobile_request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.mobile_.Destroy();
}

void mobile_request::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void mobile_request::Clear() {
// @@protoc_insertion_point(message_clear_start:tutorial.mobile_request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.mobile_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* mobile_request::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string mobile = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_mobile();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "tutorial.mobile_request.mobile");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* mobile_request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tutorial.mobile_request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string mobile = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_mobile().data(), static_cast<int>(this->_internal_mobile().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "tutorial.mobile_request.mobile");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_mobile(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tutorial.mobile_request)
  return target;
}

size_t mobile_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tutorial.mobile_request)
  size_t total_size = 0;

  // required string mobile = 1;
  if (_internal_has_mobile()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mobile());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData mobile_request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    mobile_request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*mobile_request::GetClassData() const { return &_class_data_; }


void mobile_request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<mobile_request*>(&to_msg);
  auto& from = static_cast<const mobile_request&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tutorial.mobile_request)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_mobile()) {
    _this->_internal_set_mobile(from._internal_mobile());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void mobile_request::CopyFrom(const mobile_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tutorial.mobile_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mobile_request::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void mobile_request::InternalSwap(mobile_request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mobile_, lhs_arena,
      &other->_impl_.mobile_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata mobile_request::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protocol_2eproto_getter, &descriptor_table_protocol_2eproto_once,
      file_level_metadata_protocol_2eproto[1]);
}

// ===================================================================

class mobile_response::_Internal {
 public:
  using HasBits = decltype(std::declval<mobile_response>()._impl_._has_bits_);
  static void set_has_code(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_icode(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000006) ^ 0x00000006) != 0;
  }
};

mobile_response::mobile_response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tutorial.mobile_response)
}
mobile_response::mobile_response(const mobile_response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  mobile_response* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_){}
    , decltype(_impl_.code_){}
    , decltype(_impl_.icode_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_data()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.code_, &from._impl_.code_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.icode_) -
    reinterpret_cast<char*>(&_impl_.code_)) + sizeof(_impl_.icode_));
  // @@protoc_insertion_point(copy_constructor:tutorial.mobile_response)
}

inline void mobile_response::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_){}
    , decltype(_impl_.code_){0}
    , decltype(_impl_.icode_){0}
  };
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

mobile_response::~mobile_response() {
  // @@protoc_insertion_point(destructor:tutorial.mobile_response)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void mobile_response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.Destroy();
}

void mobile_response::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void mobile_response::Clear() {
// @@protoc_insertion_point(message_clear_start:tutorial.mobile_response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.data_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.code_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.icode_) -
        reinterpret_cast<char*>(&_impl_.code_)) + sizeof(_impl_.icode_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* mobile_response::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_code(&has_bits);
          _impl_.code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 icode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_icode(&has_bits);
          _impl_.icode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "tutorial.mobile_response.data");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* mobile_response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tutorial.mobile_response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int32 code = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_code(), target);
  }

  // required int32 icode = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_icode(), target);
  }

  // optional string data = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_data().data(), static_cast<int>(this->_internal_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "tutorial.mobile_response.data");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tutorial.mobile_response)
  return target;
}

size_t mobile_response::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:tutorial.mobile_response)
  size_t total_size = 0;

  if (_internal_has_code()) {
    // required int32 code = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_code());
  }

  if (_internal_has_icode()) {
    // required int32 icode = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_icode());
  }

  return total_size;
}
size_t mobile_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tutorial.mobile_response)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required int32 code = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_code());

    // required int32 icode = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_icode());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string data = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_data());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData mobile_response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    mobile_response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*mobile_response::GetClassData() const { return &_class_data_; }


void mobile_response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<mobile_response*>(&to_msg);
  auto& from = static_cast<const mobile_response&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tutorial.mobile_response)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_data(from._internal_data());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.code_ = from._impl_.code_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.icode_ = from._impl_.icode_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void mobile_response::CopyFrom(const mobile_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tutorial.mobile_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mobile_response::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void mobile_response::InternalSwap(mobile_response* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(mobile_response, _impl_.icode_)
      + sizeof(mobile_response::_impl_.icode_)
      - PROTOBUF_FIELD_OFFSET(mobile_response, _impl_.code_)>(
          reinterpret_cast<char*>(&_impl_.code_),
          reinterpret_cast<char*>(&other->_impl_.code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata mobile_response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protocol_2eproto_getter, &descriptor_table_protocol_2eproto_once,
      file_level_metadata_protocol_2eproto[2]);
}

// ===================================================================

class login_request::_Internal {
 public:
  using HasBits = decltype(std::declval<login_request>()._impl_._has_bits_);
  static void set_has_mobile(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_icode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

login_request::login_request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tutorial.login_request)
}
login_request::login_request(const login_request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  login_request* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mobile_){}
    , decltype(_impl_.icode_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.mobile_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mobile_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_mobile()) {
    _this->_impl_.mobile_.Set(from._internal_mobile(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.icode_ = from._impl_.icode_;
  // @@protoc_insertion_point(copy_constructor:tutorial.login_request)
}

inline void login_request::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mobile_){}
    , decltype(_impl_.icode_){0}
  };
  _impl_.mobile_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mobile_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

login_request::~login_request() {
  // @@protoc_insertion_point(destructor:tutorial.login_request)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void login_request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.mobile_.Destroy();
}

void login_request::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void login_request::Clear() {
// @@protoc_insertion_point(message_clear_start:tutorial.login_request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.mobile_.ClearNonDefaultToEmpty();
  }
  _impl_.icode_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* login_request::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string mobile = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_mobile();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "tutorial.login_request.mobile");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required int32 icode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_icode(&has_bits);
          _impl_.icode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* login_request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tutorial.login_request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string mobile = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_mobile().data(), static_cast<int>(this->_internal_mobile().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "tutorial.login_request.mobile");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_mobile(), target);
  }

  // required int32 icode = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_icode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tutorial.login_request)
  return target;
}

size_t login_request::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:tutorial.login_request)
  size_t total_size = 0;

  if (_internal_has_mobile()) {
    // required string mobile = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mobile());
  }

  if (_internal_has_icode()) {
    // required int32 icode = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_icode());
  }

  return total_size;
}
size_t login_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tutorial.login_request)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string mobile = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mobile());

    // required int32 icode = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_icode());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData login_request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    login_request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*login_request::GetClassData() const { return &_class_data_; }


void login_request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<login_request*>(&to_msg);
  auto& from = static_cast<const login_request&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tutorial.login_request)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_mobile(from._internal_mobile());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.icode_ = from._impl_.icode_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void login_request::CopyFrom(const login_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tutorial.login_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool login_request::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void login_request::InternalSwap(login_request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mobile_, lhs_arena,
      &other->_impl_.mobile_, rhs_arena
  );
  swap(_impl_.icode_, other->_impl_.icode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata login_request::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protocol_2eproto_getter, &descriptor_table_protocol_2eproto_once,
      file_level_metadata_protocol_2eproto[3]);
}

// ===================================================================

class login_response::_Internal {
 public:
  using HasBits = decltype(std::declval<login_response>()._impl_._has_bits_);
  static void set_has_code(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_desc(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

login_response::login_response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tutorial.login_response)
}
login_response::login_response(const login_response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  login_response* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.desc_){}
    , decltype(_impl_.code_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.desc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.desc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_desc()) {
    _this->_impl_.desc_.Set(from._internal_desc(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.code_ = from._impl_.code_;
  // @@protoc_insertion_point(copy_constructor:tutorial.login_response)
}

inline void login_response::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.desc_){}
    , decltype(_impl_.code_){0}
  };
  _impl_.desc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.desc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

login_response::~login_response() {
  // @@protoc_insertion_point(destructor:tutorial.login_response)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void login_response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.desc_.Destroy();
}

void login_response::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void login_response::Clear() {
// @@protoc_insertion_point(message_clear_start:tutorial.login_response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.desc_.ClearNonDefaultToEmpty();
  }
  _impl_.code_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* login_response::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_code(&has_bits);
          _impl_.code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string desc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_desc();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "tutorial.login_response.desc");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* login_response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tutorial.login_response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int32 code = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_code(), target);
  }

  // optional string desc = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_desc().data(), static_cast<int>(this->_internal_desc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "tutorial.login_response.desc");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_desc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tutorial.login_response)
  return target;
}

size_t login_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tutorial.login_response)
  size_t total_size = 0;

  // required int32 code = 1;
  if (_internal_has_code()) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_code());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string desc = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_desc());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData login_response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    login_response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*login_response::GetClassData() const { return &_class_data_; }


void login_response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<login_response*>(&to_msg);
  auto& from = static_cast<const login_response&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tutorial.login_response)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_desc(from._internal_desc());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.code_ = from._impl_.code_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void login_response::CopyFrom(const login_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tutorial.login_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool login_response::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void login_response::InternalSwap(login_response* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.desc_, lhs_arena,
      &other->_impl_.desc_, rhs_arena
  );
  swap(_impl_.code_, other->_impl_.code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata login_response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protocol_2eproto_getter, &descriptor_table_protocol_2eproto_once,
      file_level_metadata_protocol_2eproto[4]);
}

// ===================================================================

class notify_online_request::_Internal {
 public:
  using HasBits = decltype(std::declval<notify_online_request>()._impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

notify_online_request::notify_online_request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tutorial.notify_online_request)
}
notify_online_request::notify_online_request(const notify_online_request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  notify_online_request* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_){}
    , decltype(_impl_.state_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.state_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.state_));
  // @@protoc_insertion_point(copy_constructor:tutorial.notify_online_request)
}

inline void notify_online_request::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_){0}
    , decltype(_impl_.state_){false}
  };
}

notify_online_request::~notify_online_request() {
  // @@protoc_insertion_point(destructor:tutorial.notify_online_request)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void notify_online_request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void notify_online_request::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void notify_online_request::Clear() {
// @@protoc_insertion_point(message_clear_start:tutorial.notify_online_request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.state_) -
        reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.state_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* notify_online_request::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_state(&has_bits);
          _impl_.state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* notify_online_request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tutorial.notify_online_request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // required bool state = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tutorial.notify_online_request)
  return target;
}

size_t notify_online_request::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:tutorial.notify_online_request)
  size_t total_size = 0;

  if (_internal_has_id()) {
    // required int32 id = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  if (_internal_has_state()) {
    // required bool state = 2;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t notify_online_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tutorial.notify_online_request)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 id = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());

    // required bool state = 2;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData notify_online_request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    notify_online_request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*notify_online_request::GetClassData() const { return &_class_data_; }


void notify_online_request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<notify_online_request*>(&to_msg);
  auto& from = static_cast<const notify_online_request&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tutorial.notify_online_request)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.id_ = from._impl_.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.state_ = from._impl_.state_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void notify_online_request::CopyFrom(const notify_online_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tutorial.notify_online_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool notify_online_request::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void notify_online_request::InternalSwap(notify_online_request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(notify_online_request, _impl_.state_)
      + sizeof(notify_online_request::_impl_.state_)
      - PROTOBUF_FIELD_OFFSET(notify_online_request, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata notify_online_request::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protocol_2eproto_getter, &descriptor_table_protocol_2eproto_once,
      file_level_metadata_protocol_2eproto[5]);
}

// ===================================================================

class notify_online_reponse::_Internal {
 public:
  using HasBits = decltype(std::declval<notify_online_reponse>()._impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

notify_online_reponse::notify_online_reponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tutorial.notify_online_reponse)
}
notify_online_reponse::notify_online_reponse(const notify_online_reponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  notify_online_reponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_){}
    , decltype(_impl_.state_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.state_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.state_));
  // @@protoc_insertion_point(copy_constructor:tutorial.notify_online_reponse)
}

inline void notify_online_reponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_){0}
    , decltype(_impl_.state_){false}
  };
}

notify_online_reponse::~notify_online_reponse() {
  // @@protoc_insertion_point(destructor:tutorial.notify_online_reponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void notify_online_reponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void notify_online_reponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void notify_online_reponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tutorial.notify_online_reponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.state_) -
        reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.state_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* notify_online_reponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_state(&has_bits);
          _impl_.state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* notify_online_reponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tutorial.notify_online_reponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // required bool state = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tutorial.notify_online_reponse)
  return target;
}

size_t notify_online_reponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:tutorial.notify_online_reponse)
  size_t total_size = 0;

  if (_internal_has_id()) {
    // required int32 id = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  if (_internal_has_state()) {
    // required bool state = 2;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t notify_online_reponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tutorial.notify_online_reponse)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 id = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());

    // required bool state = 2;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData notify_online_reponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    notify_online_reponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*notify_online_reponse::GetClassData() const { return &_class_data_; }


void notify_online_reponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<notify_online_reponse*>(&to_msg);
  auto& from = static_cast<const notify_online_reponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tutorial.notify_online_reponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.id_ = from._impl_.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.state_ = from._impl_.state_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void notify_online_reponse::CopyFrom(const notify_online_reponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tutorial.notify_online_reponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool notify_online_reponse::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void notify_online_reponse::InternalSwap(notify_online_reponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(notify_online_reponse, _impl_.state_)
      + sizeof(notify_online_reponse::_impl_.state_)
      - PROTOBUF_FIELD_OFFSET(notify_online_reponse, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata notify_online_reponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protocol_2eproto_getter, &descriptor_table_protocol_2eproto_once,
      file_level_metadata_protocol_2eproto[6]);
}

// ===================================================================

class sendtxtmsg_request::_Internal {
 public:
  using HasBits = decltype(std::declval<sendtxtmsg_request>()._impl_._has_bits_);
  static void set_has_srcid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_destid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_chatmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

sendtxtmsg_request::sendtxtmsg_request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tutorial.sendtxtmsg_request)
}
sendtxtmsg_request::sendtxtmsg_request(const sendtxtmsg_request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  sendtxtmsg_request* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.chatmessage_){}
    , decltype(_impl_.srcid_){}
    , decltype(_impl_.destid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.chatmessage_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.chatmessage_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_chatmessage()) {
    _this->_impl_.chatmessage_.Set(from._internal_chatmessage(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.srcid_, &from._impl_.srcid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.destid_) -
    reinterpret_cast<char*>(&_impl_.srcid_)) + sizeof(_impl_.destid_));
  // @@protoc_insertion_point(copy_constructor:tutorial.sendtxtmsg_request)
}

inline void sendtxtmsg_request::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.chatmessage_){}
    , decltype(_impl_.srcid_){0}
    , decltype(_impl_.destid_){0}
  };
  _impl_.chatmessage_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.chatmessage_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

sendtxtmsg_request::~sendtxtmsg_request() {
  // @@protoc_insertion_point(destructor:tutorial.sendtxtmsg_request)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void sendtxtmsg_request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.chatmessage_.Destroy();
}

void sendtxtmsg_request::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void sendtxtmsg_request::Clear() {
// @@protoc_insertion_point(message_clear_start:tutorial.sendtxtmsg_request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.chatmessage_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.srcid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.destid_) -
        reinterpret_cast<char*>(&_impl_.srcid_)) + sizeof(_impl_.destid_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* sendtxtmsg_request::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 srcid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_srcid(&has_bits);
          _impl_.srcid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 destid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_destid(&has_bits);
          _impl_.destid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string chatmessage = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_chatmessage();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "tutorial.sendtxtmsg_request.chatmessage");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* sendtxtmsg_request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tutorial.sendtxtmsg_request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int32 srcid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_srcid(), target);
  }

  // required int32 destid = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_destid(), target);
  }

  // required string chatmessage = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_chatmessage().data(), static_cast<int>(this->_internal_chatmessage().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "tutorial.sendtxtmsg_request.chatmessage");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_chatmessage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tutorial.sendtxtmsg_request)
  return target;
}

size_t sendtxtmsg_request::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:tutorial.sendtxtmsg_request)
  size_t total_size = 0;

  if (_internal_has_chatmessage()) {
    // required string chatmessage = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_chatmessage());
  }

  if (_internal_has_srcid()) {
    // required int32 srcid = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_srcid());
  }

  if (_internal_has_destid()) {
    // required int32 destid = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_destid());
  }

  return total_size;
}
size_t sendtxtmsg_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tutorial.sendtxtmsg_request)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string chatmessage = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_chatmessage());

    // required int32 srcid = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_srcid());

    // required int32 destid = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_destid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData sendtxtmsg_request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    sendtxtmsg_request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*sendtxtmsg_request::GetClassData() const { return &_class_data_; }


void sendtxtmsg_request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<sendtxtmsg_request*>(&to_msg);
  auto& from = static_cast<const sendtxtmsg_request&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tutorial.sendtxtmsg_request)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_chatmessage(from._internal_chatmessage());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.srcid_ = from._impl_.srcid_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.destid_ = from._impl_.destid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void sendtxtmsg_request::CopyFrom(const sendtxtmsg_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tutorial.sendtxtmsg_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sendtxtmsg_request::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void sendtxtmsg_request::InternalSwap(sendtxtmsg_request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.chatmessage_, lhs_arena,
      &other->_impl_.chatmessage_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(sendtxtmsg_request, _impl_.destid_)
      + sizeof(sendtxtmsg_request::_impl_.destid_)
      - PROTOBUF_FIELD_OFFSET(sendtxtmsg_request, _impl_.srcid_)>(
          reinterpret_cast<char*>(&_impl_.srcid_),
          reinterpret_cast<char*>(&other->_impl_.srcid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata sendtxtmsg_request::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protocol_2eproto_getter, &descriptor_table_protocol_2eproto_once,
      file_level_metadata_protocol_2eproto[7]);
}

// ===================================================================

class sendtxtmsg_reponse::_Internal {
 public:
  using HasBits = decltype(std::declval<sendtxtmsg_reponse>()._impl_._has_bits_);
  static void set_has_destid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_chatmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

sendtxtmsg_reponse::sendtxtmsg_reponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tutorial.sendtxtmsg_reponse)
}
sendtxtmsg_reponse::sendtxtmsg_reponse(const sendtxtmsg_reponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  sendtxtmsg_reponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.chatmessage_){}
    , decltype(_impl_.destid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.chatmessage_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.chatmessage_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_chatmessage()) {
    _this->_impl_.chatmessage_.Set(from._internal_chatmessage(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.destid_ = from._impl_.destid_;
  // @@protoc_insertion_point(copy_constructor:tutorial.sendtxtmsg_reponse)
}

inline void sendtxtmsg_reponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.chatmessage_){}
    , decltype(_impl_.destid_){0}
  };
  _impl_.chatmessage_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.chatmessage_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

sendtxtmsg_reponse::~sendtxtmsg_reponse() {
  // @@protoc_insertion_point(destructor:tutorial.sendtxtmsg_reponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void sendtxtmsg_reponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.chatmessage_.Destroy();
}

void sendtxtmsg_reponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void sendtxtmsg_reponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tutorial.sendtxtmsg_reponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.chatmessage_.ClearNonDefaultToEmpty();
  }
  _impl_.destid_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* sendtxtmsg_reponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 destid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_destid(&has_bits);
          _impl_.destid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string chatmessage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_chatmessage();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "tutorial.sendtxtmsg_reponse.chatmessage");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* sendtxtmsg_reponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tutorial.sendtxtmsg_reponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int32 destid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_destid(), target);
  }

  // required string chatmessage = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_chatmessage().data(), static_cast<int>(this->_internal_chatmessage().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "tutorial.sendtxtmsg_reponse.chatmessage");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_chatmessage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tutorial.sendtxtmsg_reponse)
  return target;
}

size_t sendtxtmsg_reponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:tutorial.sendtxtmsg_reponse)
  size_t total_size = 0;

  if (_internal_has_chatmessage()) {
    // required string chatmessage = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_chatmessage());
  }

  if (_internal_has_destid()) {
    // required int32 destid = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_destid());
  }

  return total_size;
}
size_t sendtxtmsg_reponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tutorial.sendtxtmsg_reponse)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string chatmessage = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_chatmessage());

    // required int32 destid = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_destid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData sendtxtmsg_reponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    sendtxtmsg_reponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*sendtxtmsg_reponse::GetClassData() const { return &_class_data_; }


void sendtxtmsg_reponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<sendtxtmsg_reponse*>(&to_msg);
  auto& from = static_cast<const sendtxtmsg_reponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tutorial.sendtxtmsg_reponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_chatmessage(from._internal_chatmessage());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.destid_ = from._impl_.destid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void sendtxtmsg_reponse::CopyFrom(const sendtxtmsg_reponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tutorial.sendtxtmsg_reponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sendtxtmsg_reponse::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void sendtxtmsg_reponse::InternalSwap(sendtxtmsg_reponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.chatmessage_, lhs_arena,
      &other->_impl_.chatmessage_, rhs_arena
  );
  swap(_impl_.destid_, other->_impl_.destid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata sendtxtmsg_reponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protocol_2eproto_getter, &descriptor_table_protocol_2eproto_once,
      file_level_metadata_protocol_2eproto[8]);
}

// ===================================================================

class addfriend_request::_Internal {
 public:
  using HasBits = decltype(std::declval<addfriend_request>()._impl_._has_bits_);
  static void set_has_srcid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_destid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

addfriend_request::addfriend_request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tutorial.addfriend_request)
}
addfriend_request::addfriend_request(const addfriend_request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  addfriend_request* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.srcid_){}
    , decltype(_impl_.destid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.srcid_, &from._impl_.srcid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.destid_) -
    reinterpret_cast<char*>(&_impl_.srcid_)) + sizeof(_impl_.destid_));
  // @@protoc_insertion_point(copy_constructor:tutorial.addfriend_request)
}

inline void addfriend_request::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.srcid_){0}
    , decltype(_impl_.destid_){0}
  };
}

addfriend_request::~addfriend_request() {
  // @@protoc_insertion_point(destructor:tutorial.addfriend_request)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void addfriend_request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void addfriend_request::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void addfriend_request::Clear() {
// @@protoc_insertion_point(message_clear_start:tutorial.addfriend_request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.srcid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.destid_) -
        reinterpret_cast<char*>(&_impl_.srcid_)) + sizeof(_impl_.destid_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* addfriend_request::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 srcid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_srcid(&has_bits);
          _impl_.srcid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 destid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_destid(&has_bits);
          _impl_.destid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* addfriend_request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tutorial.addfriend_request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int32 srcid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_srcid(), target);
  }

  // required int32 destid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_destid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tutorial.addfriend_request)
  return target;
}

size_t addfriend_request::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:tutorial.addfriend_request)
  size_t total_size = 0;

  if (_internal_has_srcid()) {
    // required int32 srcid = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_srcid());
  }

  if (_internal_has_destid()) {
    // required int32 destid = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_destid());
  }

  return total_size;
}
size_t addfriend_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tutorial.addfriend_request)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 srcid = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_srcid());

    // required int32 destid = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_destid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData addfriend_request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    addfriend_request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*addfriend_request::GetClassData() const { return &_class_data_; }


void addfriend_request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<addfriend_request*>(&to_msg);
  auto& from = static_cast<const addfriend_request&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tutorial.addfriend_request)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.srcid_ = from._impl_.srcid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.destid_ = from._impl_.destid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void addfriend_request::CopyFrom(const addfriend_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tutorial.addfriend_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool addfriend_request::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void addfriend_request::InternalSwap(addfriend_request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(addfriend_request, _impl_.destid_)
      + sizeof(addfriend_request::_impl_.destid_)
      - PROTOBUF_FIELD_OFFSET(addfriend_request, _impl_.srcid_)>(
          reinterpret_cast<char*>(&_impl_.srcid_),
          reinterpret_cast<char*>(&other->_impl_.srcid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata addfriend_request::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protocol_2eproto_getter, &descriptor_table_protocol_2eproto_once,
      file_level_metadata_protocol_2eproto[9]);
}

// ===================================================================

class addfriend_response::_Internal {
 public:
  using HasBits = decltype(std::declval<addfriend_response>()._impl_._has_bits_);
  static void set_has_destid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::tutorial::userinfo& si(const addfriend_response* msg);
  static void set_has_si(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::tutorial::userinfo&
addfriend_response::_Internal::si(const addfriend_response* msg) {
  return *msg->_impl_.si_;
}
addfriend_response::addfriend_response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tutorial.addfriend_response)
}
addfriend_response::addfriend_response(const addfriend_response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  addfriend_response* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.si_){nullptr}
    , decltype(_impl_.destid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_si()) {
    _this->_impl_.si_ = new ::tutorial::userinfo(*from._impl_.si_);
  }
  _this->_impl_.destid_ = from._impl_.destid_;
  // @@protoc_insertion_point(copy_constructor:tutorial.addfriend_response)
}

inline void addfriend_response::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.si_){nullptr}
    , decltype(_impl_.destid_){0}
  };
}

addfriend_response::~addfriend_response() {
  // @@protoc_insertion_point(destructor:tutorial.addfriend_response)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void addfriend_response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.si_;
}

void addfriend_response::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void addfriend_response::Clear() {
// @@protoc_insertion_point(message_clear_start:tutorial.addfriend_response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.si_ != nullptr);
    _impl_.si_->Clear();
  }
  _impl_.destid_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* addfriend_response::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 destid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_destid(&has_bits);
          _impl_.destid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .tutorial.userinfo si = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_si(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* addfriend_response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tutorial.addfriend_response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int32 destid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_destid(), target);
  }

  // required .tutorial.userinfo si = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::si(this),
        _Internal::si(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tutorial.addfriend_response)
  return target;
}

size_t addfriend_response::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:tutorial.addfriend_response)
  size_t total_size = 0;

  if (_internal_has_si()) {
    // required .tutorial.userinfo si = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.si_);
  }

  if (_internal_has_destid()) {
    // required int32 destid = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_destid());
  }

  return total_size;
}
size_t addfriend_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tutorial.addfriend_response)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .tutorial.userinfo si = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.si_);

    // required int32 destid = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_destid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData addfriend_response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    addfriend_response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*addfriend_response::GetClassData() const { return &_class_data_; }


void addfriend_response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<addfriend_response*>(&to_msg);
  auto& from = static_cast<const addfriend_response&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tutorial.addfriend_response)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_si()->::tutorial::userinfo::MergeFrom(
          from._internal_si());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.destid_ = from._impl_.destid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void addfriend_response::CopyFrom(const addfriend_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tutorial.addfriend_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool addfriend_response::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_si()) {
    if (!_impl_.si_->IsInitialized()) return false;
  }
  return true;
}

void addfriend_response::InternalSwap(addfriend_response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(addfriend_response, _impl_.destid_)
      + sizeof(addfriend_response::_impl_.destid_)
      - PROTOBUF_FIELD_OFFSET(addfriend_response, _impl_.si_)>(
          reinterpret_cast<char*>(&_impl_.si_),
          reinterpret_cast<char*>(&other->_impl_.si_));
}

::PROTOBUF_NAMESPACE_ID::Metadata addfriend_response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protocol_2eproto_getter, &descriptor_table_protocol_2eproto_once,
      file_level_metadata_protocol_2eproto[10]);
}

// ===================================================================

class addfriend_result_request::_Internal {
 public:
  using HasBits = decltype(std::declval<addfriend_result_request>()._impl_._has_bits_);
  static void set_has_srcid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_destid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_addresult(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

addfriend_result_request::addfriend_result_request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tutorial.addfriend_result_request)
}
addfriend_result_request::addfriend_result_request(const addfriend_result_request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  addfriend_result_request* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.srcid_){}
    , decltype(_impl_.destid_){}
    , decltype(_impl_.addresult_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.srcid_, &from._impl_.srcid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.addresult_) -
    reinterpret_cast<char*>(&_impl_.srcid_)) + sizeof(_impl_.addresult_));
  // @@protoc_insertion_point(copy_constructor:tutorial.addfriend_result_request)
}

inline void addfriend_result_request::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.srcid_){0}
    , decltype(_impl_.destid_){0}
    , decltype(_impl_.addresult_){false}
  };
}

addfriend_result_request::~addfriend_result_request() {
  // @@protoc_insertion_point(destructor:tutorial.addfriend_result_request)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void addfriend_result_request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void addfriend_result_request::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void addfriend_result_request::Clear() {
// @@protoc_insertion_point(message_clear_start:tutorial.addfriend_result_request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.srcid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.addresult_) -
        reinterpret_cast<char*>(&_impl_.srcid_)) + sizeof(_impl_.addresult_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* addfriend_result_request::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 srcid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_srcid(&has_bits);
          _impl_.srcid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 destid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_destid(&has_bits);
          _impl_.destid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool addresult = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_addresult(&has_bits);
          _impl_.addresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* addfriend_result_request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tutorial.addfriend_result_request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int32 srcid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_srcid(), target);
  }

  // required int32 destid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_destid(), target);
  }

  // required bool addresult = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_addresult(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tutorial.addfriend_result_request)
  return target;
}

size_t addfriend_result_request::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:tutorial.addfriend_result_request)
  size_t total_size = 0;

  if (_internal_has_srcid()) {
    // required int32 srcid = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_srcid());
  }

  if (_internal_has_destid()) {
    // required int32 destid = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_destid());
  }

  if (_internal_has_addresult()) {
    // required bool addresult = 3;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t addfriend_result_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tutorial.addfriend_result_request)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 srcid = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_srcid());

    // required int32 destid = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_destid());

    // required bool addresult = 3;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData addfriend_result_request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    addfriend_result_request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*addfriend_result_request::GetClassData() const { return &_class_data_; }


void addfriend_result_request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<addfriend_result_request*>(&to_msg);
  auto& from = static_cast<const addfriend_result_request&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tutorial.addfriend_result_request)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.srcid_ = from._impl_.srcid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.destid_ = from._impl_.destid_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.addresult_ = from._impl_.addresult_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void addfriend_result_request::CopyFrom(const addfriend_result_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tutorial.addfriend_result_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool addfriend_result_request::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void addfriend_result_request::InternalSwap(addfriend_result_request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(addfriend_result_request, _impl_.addresult_)
      + sizeof(addfriend_result_request::_impl_.addresult_)
      - PROTOBUF_FIELD_OFFSET(addfriend_result_request, _impl_.srcid_)>(
          reinterpret_cast<char*>(&_impl_.srcid_),
          reinterpret_cast<char*>(&other->_impl_.srcid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata addfriend_result_request::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protocol_2eproto_getter, &descriptor_table_protocol_2eproto_once,
      file_level_metadata_protocol_2eproto[11]);
}

// ===================================================================

class addfriend_result_response::_Internal {
 public:
  using HasBits = decltype(std::declval<addfriend_result_response>()._impl_._has_bits_);
  static void set_has_srcid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_addresult(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::tutorial::userinfo& user(const addfriend_result_response* msg);
  static void set_has_user(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000006) ^ 0x00000006) != 0;
  }
};

const ::tutorial::userinfo&
addfriend_result_response::_Internal::user(const addfriend_result_response* msg) {
  return *msg->_impl_.user_;
}
addfriend_result_response::addfriend_result_response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tutorial.addfriend_result_response)
}
addfriend_result_response::addfriend_result_response(const addfriend_result_response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  addfriend_result_response* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.user_){nullptr}
    , decltype(_impl_.srcid_){}
    , decltype(_impl_.addresult_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user()) {
    _this->_impl_.user_ = new ::tutorial::userinfo(*from._impl_.user_);
  }
  ::memcpy(&_impl_.srcid_, &from._impl_.srcid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.addresult_) -
    reinterpret_cast<char*>(&_impl_.srcid_)) + sizeof(_impl_.addresult_));
  // @@protoc_insertion_point(copy_constructor:tutorial.addfriend_result_response)
}

inline void addfriend_result_response::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.user_){nullptr}
    , decltype(_impl_.srcid_){0}
    , decltype(_impl_.addresult_){false}
  };
}

addfriend_result_response::~addfriend_result_response() {
  // @@protoc_insertion_point(destructor:tutorial.addfriend_result_response)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void addfriend_result_response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.user_;
}

void addfriend_result_response::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void addfriend_result_response::Clear() {
// @@protoc_insertion_point(message_clear_start:tutorial.addfriend_result_response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.user_ != nullptr);
    _impl_.user_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.srcid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.addresult_) -
        reinterpret_cast<char*>(&_impl_.srcid_)) + sizeof(_impl_.addresult_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* addfriend_result_response::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 srcid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_srcid(&has_bits);
          _impl_.srcid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool addresult = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_addresult(&has_bits);
          _impl_.addresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .tutorial.userinfo user = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_user(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* addfriend_result_response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tutorial.addfriend_result_response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int32 srcid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_srcid(), target);
  }

  // required bool addresult = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_addresult(), target);
  }

  // optional .tutorial.userinfo user = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::user(this),
        _Internal::user(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tutorial.addfriend_result_response)
  return target;
}

size_t addfriend_result_response::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:tutorial.addfriend_result_response)
  size_t total_size = 0;

  if (_internal_has_srcid()) {
    // required int32 srcid = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_srcid());
  }

  if (_internal_has_addresult()) {
    // required bool addresult = 2;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t addfriend_result_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tutorial.addfriend_result_response)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required int32 srcid = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_srcid());

    // required bool addresult = 2;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .tutorial.userinfo user = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData addfriend_result_response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    addfriend_result_response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*addfriend_result_response::GetClassData() const { return &_class_data_; }


void addfriend_result_response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<addfriend_result_response*>(&to_msg);
  auto& from = static_cast<const addfriend_result_response&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tutorial.addfriend_result_response)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_user()->::tutorial::userinfo::MergeFrom(
          from._internal_user());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.srcid_ = from._impl_.srcid_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.addresult_ = from._impl_.addresult_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void addfriend_result_response::CopyFrom(const addfriend_result_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tutorial.addfriend_result_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool addfriend_result_response::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_user()) {
    if (!_impl_.user_->IsInitialized()) return false;
  }
  return true;
}

void addfriend_result_response::InternalSwap(addfriend_result_response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(addfriend_result_response, _impl_.addresult_)
      + sizeof(addfriend_result_response::_impl_.addresult_)
      - PROTOBUF_FIELD_OFFSET(addfriend_result_response, _impl_.user_)>(
          reinterpret_cast<char*>(&_impl_.user_),
          reinterpret_cast<char*>(&other->_impl_.user_));
}

::PROTOBUF_NAMESPACE_ID::Metadata addfriend_result_response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protocol_2eproto_getter, &descriptor_table_protocol_2eproto_once,
      file_level_metadata_protocol_2eproto[12]);
}

// ===================================================================

class deletefriend_request::_Internal {
 public:
  using HasBits = decltype(std::declval<deletefriend_request>()._impl_._has_bits_);
  static void set_has_srcid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_destid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

deletefriend_request::deletefriend_request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tutorial.deletefriend_request)
}
deletefriend_request::deletefriend_request(const deletefriend_request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  deletefriend_request* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.srcid_){}
    , decltype(_impl_.destid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.srcid_, &from._impl_.srcid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.destid_) -
    reinterpret_cast<char*>(&_impl_.srcid_)) + sizeof(_impl_.destid_));
  // @@protoc_insertion_point(copy_constructor:tutorial.deletefriend_request)
}

inline void deletefriend_request::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.srcid_){0}
    , decltype(_impl_.destid_){0}
  };
}

deletefriend_request::~deletefriend_request() {
  // @@protoc_insertion_point(destructor:tutorial.deletefriend_request)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void deletefriend_request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void deletefriend_request::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void deletefriend_request::Clear() {
// @@protoc_insertion_point(message_clear_start:tutorial.deletefriend_request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.srcid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.destid_) -
        reinterpret_cast<char*>(&_impl_.srcid_)) + sizeof(_impl_.destid_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* deletefriend_request::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 srcid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_srcid(&has_bits);
          _impl_.srcid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 destid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_destid(&has_bits);
          _impl_.destid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* deletefriend_request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tutorial.deletefriend_request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int32 srcid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_srcid(), target);
  }

  // required int32 destid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_destid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tutorial.deletefriend_request)
  return target;
}

size_t deletefriend_request::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:tutorial.deletefriend_request)
  size_t total_size = 0;

  if (_internal_has_srcid()) {
    // required int32 srcid = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_srcid());
  }

  if (_internal_has_destid()) {
    // required int32 destid = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_destid());
  }

  return total_size;
}
size_t deletefriend_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tutorial.deletefriend_request)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 srcid = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_srcid());

    // required int32 destid = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_destid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData deletefriend_request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    deletefriend_request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*deletefriend_request::GetClassData() const { return &_class_data_; }


void deletefriend_request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<deletefriend_request*>(&to_msg);
  auto& from = static_cast<const deletefriend_request&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tutorial.deletefriend_request)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.srcid_ = from._impl_.srcid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.destid_ = from._impl_.destid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void deletefriend_request::CopyFrom(const deletefriend_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tutorial.deletefriend_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool deletefriend_request::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void deletefriend_request::InternalSwap(deletefriend_request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(deletefriend_request, _impl_.destid_)
      + sizeof(deletefriend_request::_impl_.destid_)
      - PROTOBUF_FIELD_OFFSET(deletefriend_request, _impl_.srcid_)>(
          reinterpret_cast<char*>(&_impl_.srcid_),
          reinterpret_cast<char*>(&other->_impl_.srcid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata deletefriend_request::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protocol_2eproto_getter, &descriptor_table_protocol_2eproto_once,
      file_level_metadata_protocol_2eproto[13]);
}

// ===================================================================

class deletefriend_response::_Internal {
 public:
  using HasBits = decltype(std::declval<deletefriend_response>()._impl_._has_bits_);
  static void set_has_srcid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

deletefriend_response::deletefriend_response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tutorial.deletefriend_response)
}
deletefriend_response::deletefriend_response(const deletefriend_response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  deletefriend_response* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.srcid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.srcid_ = from._impl_.srcid_;
  // @@protoc_insertion_point(copy_constructor:tutorial.deletefriend_response)
}

inline void deletefriend_response::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.srcid_){0}
  };
}

deletefriend_response::~deletefriend_response() {
  // @@protoc_insertion_point(destructor:tutorial.deletefriend_response)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void deletefriend_response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void deletefriend_response::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void deletefriend_response::Clear() {
// @@protoc_insertion_point(message_clear_start:tutorial.deletefriend_response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.srcid_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* deletefriend_response::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 srcid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_srcid(&has_bits);
          _impl_.srcid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* deletefriend_response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tutorial.deletefriend_response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int32 srcid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_srcid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tutorial.deletefriend_response)
  return target;
}

size_t deletefriend_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tutorial.deletefriend_response)
  size_t total_size = 0;

  // required int32 srcid = 1;
  if (_internal_has_srcid()) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_srcid());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData deletefriend_response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    deletefriend_response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*deletefriend_response::GetClassData() const { return &_class_data_; }


void deletefriend_response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<deletefriend_response*>(&to_msg);
  auto& from = static_cast<const deletefriend_response&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tutorial.deletefriend_response)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_srcid()) {
    _this->_internal_set_srcid(from._internal_srcid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void deletefriend_response::CopyFrom(const deletefriend_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tutorial.deletefriend_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool deletefriend_response::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void deletefriend_response::InternalSwap(deletefriend_response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.srcid_, other->_impl_.srcid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata deletefriend_response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protocol_2eproto_getter, &descriptor_table_protocol_2eproto_once,
      file_level_metadata_protocol_2eproto[14]);
}

// ===================================================================

class selectfriend_request::_Internal {
 public:
  using HasBits = decltype(std::declval<selectfriend_request>()._impl_._has_bits_);
  static void set_has_tofinduserid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

selectfriend_request::selectfriend_request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tutorial.selectfriend_request)
}
selectfriend_request::selectfriend_request(const selectfriend_request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  selectfriend_request* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tofinduserid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.tofinduserid_ = from._impl_.tofinduserid_;
  // @@protoc_insertion_point(copy_constructor:tutorial.selectfriend_request)
}

inline void selectfriend_request::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tofinduserid_){0}
  };
}

selectfriend_request::~selectfriend_request() {
  // @@protoc_insertion_point(destructor:tutorial.selectfriend_request)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void selectfriend_request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void selectfriend_request::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void selectfriend_request::Clear() {
// @@protoc_insertion_point(message_clear_start:tutorial.selectfriend_request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tofinduserid_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* selectfriend_request::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 tofinduserid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_tofinduserid(&has_bits);
          _impl_.tofinduserid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* selectfriend_request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tutorial.selectfriend_request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int32 tofinduserid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_tofinduserid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tutorial.selectfriend_request)
  return target;
}

size_t selectfriend_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tutorial.selectfriend_request)
  size_t total_size = 0;

  // required int32 tofinduserid = 1;
  if (_internal_has_tofinduserid()) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_tofinduserid());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData selectfriend_request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    selectfriend_request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*selectfriend_request::GetClassData() const { return &_class_data_; }


void selectfriend_request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<selectfriend_request*>(&to_msg);
  auto& from = static_cast<const selectfriend_request&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tutorial.selectfriend_request)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_tofinduserid()) {
    _this->_internal_set_tofinduserid(from._internal_tofinduserid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void selectfriend_request::CopyFrom(const selectfriend_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tutorial.selectfriend_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool selectfriend_request::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void selectfriend_request::InternalSwap(selectfriend_request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.tofinduserid_, other->_impl_.tofinduserid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata selectfriend_request::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protocol_2eproto_getter, &descriptor_table_protocol_2eproto_once,
      file_level_metadata_protocol_2eproto[15]);
}

// ===================================================================

class selectfriend_response::_Internal {
 public:
  using HasBits = decltype(std::declval<selectfriend_response>()._impl_._has_bits_);
  static void set_has_isfind(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_resultid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

selectfriend_response::selectfriend_response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tutorial.selectfriend_response)
}
selectfriend_response::selectfriend_response(const selectfriend_response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  selectfriend_response* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.isfind_){}
    , decltype(_impl_.resultid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.isfind_, &from._impl_.isfind_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.resultid_) -
    reinterpret_cast<char*>(&_impl_.isfind_)) + sizeof(_impl_.resultid_));
  // @@protoc_insertion_point(copy_constructor:tutorial.selectfriend_response)
}

inline void selectfriend_response::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.isfind_){false}
    , decltype(_impl_.resultid_){0}
  };
}

selectfriend_response::~selectfriend_response() {
  // @@protoc_insertion_point(destructor:tutorial.selectfriend_response)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void selectfriend_response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void selectfriend_response::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void selectfriend_response::Clear() {
// @@protoc_insertion_point(message_clear_start:tutorial.selectfriend_response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.isfind_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.resultid_) -
        reinterpret_cast<char*>(&_impl_.isfind_)) + sizeof(_impl_.resultid_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* selectfriend_response::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required bool isfind = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_isfind(&has_bits);
          _impl_.isfind_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 resultid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_resultid(&has_bits);
          _impl_.resultid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* selectfriend_response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tutorial.selectfriend_response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required bool isfind = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_isfind(), target);
  }

  // optional int32 resultid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_resultid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tutorial.selectfriend_response)
  return target;
}

size_t selectfriend_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tutorial.selectfriend_response)
  size_t total_size = 0;

  // required bool isfind = 1;
  if (_internal_has_isfind()) {
    total_size += 1 + 1;
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 resultid = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_resultid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData selectfriend_response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    selectfriend_response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*selectfriend_response::GetClassData() const { return &_class_data_; }


void selectfriend_response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<selectfriend_response*>(&to_msg);
  auto& from = static_cast<const selectfriend_response&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tutorial.selectfriend_response)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.isfind_ = from._impl_.isfind_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.resultid_ = from._impl_.resultid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void selectfriend_response::CopyFrom(const selectfriend_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tutorial.selectfriend_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool selectfriend_response::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void selectfriend_response::InternalSwap(selectfriend_response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(selectfriend_response, _impl_.resultid_)
      + sizeof(selectfriend_response::_impl_.resultid_)
      - PROTOBUF_FIELD_OFFSET(selectfriend_response, _impl_.isfind_)>(
          reinterpret_cast<char*>(&_impl_.isfind_),
          reinterpret_cast<char*>(&other->_impl_.isfind_));
}

::PROTOBUF_NAMESPACE_ID::Metadata selectfriend_response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protocol_2eproto_getter, &descriptor_table_protocol_2eproto_once,
      file_level_metadata_protocol_2eproto[16]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace tutorial
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tutorial::userinfo*
Arena::CreateMaybeMessage< ::tutorial::userinfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tutorial::userinfo >(arena);
}
template<> PROTOBUF_NOINLINE ::tutorial::mobile_request*
Arena::CreateMaybeMessage< ::tutorial::mobile_request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tutorial::mobile_request >(arena);
}
template<> PROTOBUF_NOINLINE ::tutorial::mobile_response*
Arena::CreateMaybeMessage< ::tutorial::mobile_response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tutorial::mobile_response >(arena);
}
template<> PROTOBUF_NOINLINE ::tutorial::login_request*
Arena::CreateMaybeMessage< ::tutorial::login_request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tutorial::login_request >(arena);
}
template<> PROTOBUF_NOINLINE ::tutorial::login_response*
Arena::CreateMaybeMessage< ::tutorial::login_response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tutorial::login_response >(arena);
}
template<> PROTOBUF_NOINLINE ::tutorial::notify_online_request*
Arena::CreateMaybeMessage< ::tutorial::notify_online_request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tutorial::notify_online_request >(arena);
}
template<> PROTOBUF_NOINLINE ::tutorial::notify_online_reponse*
Arena::CreateMaybeMessage< ::tutorial::notify_online_reponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tutorial::notify_online_reponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tutorial::sendtxtmsg_request*
Arena::CreateMaybeMessage< ::tutorial::sendtxtmsg_request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tutorial::sendtxtmsg_request >(arena);
}
template<> PROTOBUF_NOINLINE ::tutorial::sendtxtmsg_reponse*
Arena::CreateMaybeMessage< ::tutorial::sendtxtmsg_reponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tutorial::sendtxtmsg_reponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tutorial::addfriend_request*
Arena::CreateMaybeMessage< ::tutorial::addfriend_request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tutorial::addfriend_request >(arena);
}
template<> PROTOBUF_NOINLINE ::tutorial::addfriend_response*
Arena::CreateMaybeMessage< ::tutorial::addfriend_response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tutorial::addfriend_response >(arena);
}
template<> PROTOBUF_NOINLINE ::tutorial::addfriend_result_request*
Arena::CreateMaybeMessage< ::tutorial::addfriend_result_request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tutorial::addfriend_result_request >(arena);
}
template<> PROTOBUF_NOINLINE ::tutorial::addfriend_result_response*
Arena::CreateMaybeMessage< ::tutorial::addfriend_result_response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tutorial::addfriend_result_response >(arena);
}
template<> PROTOBUF_NOINLINE ::tutorial::deletefriend_request*
Arena::CreateMaybeMessage< ::tutorial::deletefriend_request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tutorial::deletefriend_request >(arena);
}
template<> PROTOBUF_NOINLINE ::tutorial::deletefriend_response*
Arena::CreateMaybeMessage< ::tutorial::deletefriend_response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tutorial::deletefriend_response >(arena);
}
template<> PROTOBUF_NOINLINE ::tutorial::selectfriend_request*
Arena::CreateMaybeMessage< ::tutorial::selectfriend_request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tutorial::selectfriend_request >(arena);
}
template<> PROTOBUF_NOINLINE ::tutorial::selectfriend_response*
Arena::CreateMaybeMessage< ::tutorial::selectfriend_response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tutorial::selectfriend_response >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
